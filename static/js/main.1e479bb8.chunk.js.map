{"version":3,"sources":["assets/image.png","components/Navbar/Navbar.js","components/Navbar/PageFooter.js","queries/collections_queries.js","utils/filters.js","components/Collections/DataTable.js","components/Collections/IssueColumns.js","components/Collections/ACIssues.js","components/Collections/PRColumns.js","components/Collections/ACPullRequests.js","components/Collections/CollectionInsights.js","components/Collections/ReleasesAndTags.js","data/repositories.js","components/Collections/RepositoryDropdown.js","components/Collections/Collections.js","data/users.js","queries/developer_queries.js","components/Developers/OverallInfo.js","queries/developer_repo_wise_issue_pr_query.js","components/Developers/RepositoryWiseDetails.js","components/Developers/SplitUpInfo.js","components/Developers/DeveloperDetails.js","components/Developers/DevelopersList.js","components/Developers/Developers.js","components/Analytics/RepositoryList.js","queries/analytics_queries.js","utils/calculateAverageDays.js","components/Analytics/LineGraph.js","components/Analytics/BarGraph.js","components/Analytics/DoughnutChart.js","components/Analytics/HorizontalBarGraph.js","components/Analytics/AnalyticGraphs.js","queries/analytics_monthwise_stats.js","queries/analytics_community_contribution_stats.js","components/Analytics/RepositoryAnalytics.js","utils/separateAndSplitData.js","components/Analytics/Analytics.js","components/ErrorPage/Error404.js","App.js","index.js"],"names":["Link","Anchor","Navbar","useState","visible","setVisible","className","src","logo","alt","style","fontWeight","targetOffset","href","title","size","icon","MenuOutlined","onClick","placement","closable","onClose","PageFooter","width","height","GithubOutlined","ISSUES","gql","PR","COLLECTION_INSIGHTS","RELEASES_AND_TAGS","Filter","column","marginTop","canFilter","render","DefaultColumnFilter","filterValue","setFilter","length","preFilteredRows","value","onChange","e","target","undefined","placeholder","SelectColumnFilter","id","options","React","useMemo","Set","forEach","row","add","values","Option","Select","type","defaultValue","map","option","DateFilter","props","defValue","moment","subtract","startOf","endOf","dateRanges","Today","useEffect","filterByDate","startDate","endDate","filter","isAfter","_d","isBefore","RangePicker","DatePicker","format","ranges","defaultPickerValue","DataTable","tag","tableData","repositoryName","totalCount","columns","tableColumns","data","tableInstance","useTable","defaultColumn","useFilters","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","rows","page","nextPage","previousPage","canNextPage","canPreviousPage","pageOptions","gotoPage","pageCount","setPageSize","state","prepareRow","pageIndex","pageSize","valueStyle","color","suffix","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","colSpan","getRowProps","cells","cell","getCellProps","min","pageNumber","Number","disabled","BackwardOutlined","ForwardOutlined","ISSUE_COLUMNS","Header","Footer","accessor","Cell","Date","disableSortBy","columnId","filterValues","original","node","url","rel","disableFilters","ACIssues","owner","repository","useQuery","variables","ownerName","cursor","fetchPolicy","loading","error","fetchMore","display","direction","justifyContent","flexWrap","hoverable","marginLeft","marginRight","flexDirection","CalendarFilled","fontSize","flexGrow","issues","edges","createdAt","CheckCircleFilled","pageInfo","hasNextPage","alignItems","shape","endCursor","updateQuery","previousResult","fetchMoreResult","nameWithOwner","PR_COLUMNS","ACPullRequests","pullRequests","CollectionInsights","orientation","plain","gutter","span","openIssues","closedIssues","openPRs","closedPRs","mergedPRs","precision","prefix","ArrowUpOutlined","ReleasesAndTags","TagsOutlined","tags","refs","name","message","tagger","date","description","REPOSITORIES","repo","RepositoryDropdown","repositoryCallback","repositories","showSearch","JSON","parse","localStorage","getItem","index","Collections","setRepository","setItem","stringify","subTitle","backgroundColor","USERS","DEVELOPER_DETAILS","DEVELOPER_CONTRIBUTIONS","OverallInfo","selectedDeveloper","repositoryList","repoQueryString","item","join","toString","dateQueryString","setDateQueryString","issueOpenQueryString","issueClosedQueryString","prOpenQueryString","prMergedQueryString","totalContributionQueryString","queryStringIssueOpen","queryStringIssueClosed","queryStringPROpen","queryStringPRMerged","queryStringTotal","contributionLoading","contributionError","contributionData","userName","infoLoading","infoError","infoData","OptGroup","user","avatarUrl","login","label","month","TOTAL_CONTRIBUTION","issueCount","OPEN_ISSUES","CLOSED_ISSUES","OPEN_PR","MERGED_PR","removeSpecialCharacters","str","replace","queryGenerator","toUpperCase","open_pr_qs","merged_pr_qs","open_issue_qs","closed_issue_qs","innerQuery","RepositoryWiseDetails","openPRS","mergedPRS","SpiltUpInfo","query","console","log","DEVELOPER_REPO_WISE_ISSUE_PR","DeveloperDetails","DeveloperList","developerCallback","drawerClose","searchName","setSearchName","searchResults","setSearchResults","users","results","toLowerCase","includes","allowClear","handleSearch","defaultProps","Developers","setSelectedDeveloper","UnorderedListOutlined","getContainer","drawerStyle","RepositoryList","searchRepository","setSearchRepository","ISSUES_AND_PR_TOTAL_COUNT","ISSUES_AND_PR_AVERAGE","calculateAverageDays","totalDaysDifference","diff","closedAt","mergedAt","Math","floor","LineGraph","dataGroupedByMonth","heading","dataToPlot","labels","Month","datasets","fill","lineTension","borderColor","borderWidth","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","closed","open","toFixed","contentForInfo","textAlign","LineChartOutlined","scales","yAxes","scaleLabel","labelString","xAxes","ticks","autoSkip","maxRotation","minRotation","tooltips","callbacks","tooltipItem","datasetIndex","BarGraph","label1","label2","merged","BarChartOutlined","DoughnutChart","data1","data2","hoverBackgroundColor","dataset","total","_meta","Object","keys","currentValue","parseFloat","legend","position","boxWidth","PieChartOutlined","HorizontalBarGraph","communityContributionData","setDate","allIssues","OVERALL_ALL_ISSUES","nonCommunityIssues","OVERALL_NON_COMMUNITY_ISSUES","allPRs","OVERALL_ALL_PRS","nonCommunityPRs","OVERALL_NON_COMMUNITY_PRS","LAST_MONTH_ALL_ISSUES","LAST_MONTH_NON_COMMUNITY_ISSUES","LAST_MONTH_ALL_PRS","LAST_MONTH_NON_COMMUNITY_PRS","LAST_SIX_MONTHS_ALL_ISSUES","LAST_SIX_MONTHS_NON_COMMUNITY_ISSUES","LAST_SIX_MONTHS_ALL_PRS","LAST_SIX_MONTHS_NON_COMMUNITY_PRS","LAST_YEAR_ALL_ISSUES","LAST_YEAR_NON_COMMUNITY_ISSUES","LAST_YEAR_ALL_PRS","LAST_YEAR_NON_COMMUNITY_PRS","beginAtZero","RadarChartOutlined","AnalyticGraphs","totalOpenIssueCount","totalCloseIssueCount","totalOpenPRCount","totalMergePRCount","averageDaysIssueClosed","averageDaysPRMerged","issuesStatData","prsStatData","contentForPRInfo","contentForIssueInfo","image","Empty","PRESENTED_IMAGE_SIMPLE","IssuesCloseOutlined","PullRequestOutlined","selectedRepository","dateString","finalQuery","months","monthRanges","noOfMonths","monthStart","monthEnd","push","MONTHS","i","substring","pr_non_community","authorString","pr_all","issue_non_community","issue_all","MEMBERS","authors","trim","DATE_RANGE","today","fromDate","COMMUNITY_CONTRIBUTIONS","RepositoryAnalytics","totalCountDataLoading","totalCountDataData","averageDataLoading","averageDataData","ISSUE_AVG","nodes","PR_AVG","ISSUES_AND_PRS_MONTHLY","monthlyStatLoading","monthlyStatData","statData","_","groupBy","key","issuesByMonth","true","x","split","prsByMonth","false","issuesStatSplit","issue","a","y","prsStatSplit","pr","separateAndSplitData","communityContributionLoading","Analytics","setSelectedRepository","Error404","history","useHistory","status","extra","Layout","Content","App","basename","process","exact","from","to","path","httpLink","HttpLink","uri","REACT_APP_GITHUB_API_URL","Authorization","REACT_APP_GITHUB_TOKEN","errorLink","onError","graphQLErrors","networkError","locations","client","ApolloClient","link","concat","cache","InMemoryCache","ReactDOM","document","getElementById"],"mappings":"mQAAe,MAA0B,kC,mCCKjCA,EAASC,IAATD,KAoDOE,EAlDA,WAAO,IAAD,EACWC,oBAAS,GADpB,mBACZC,EADY,KACHC,EADG,KAWnB,OACE,qBAAKC,UAAU,SAAf,SACE,sBAAKA,UAAU,SAAf,UACE,sBAAKA,UAAU,OAAf,UACE,qBAAKC,IAAKC,EAAMC,IAAI,SACpB,oBAAIC,MAAO,CAAEC,WAAY,QAAzB,0CAEF,qBAAKL,UAAU,gBAAf,SACE,eAAC,IAAD,CAAQM,aAAa,KAArB,UACE,cAACZ,EAAD,CAAMa,KAAK,eAAeC,MAAM,aAChC,cAACd,EAAD,CAAMa,KAAK,cAAcC,MAAM,eAC/B,cAACd,EAAD,CAAMa,KAAK,aAAaC,MAAM,mBAGlC,sBAAKR,UAAU,iBAAf,UACE,cAAC,IAAD,CACES,KAAK,QACLC,KAAM,cAACC,EAAA,EAAD,IACNC,QA1BS,WACjBb,GAAW,MA2BL,cAAC,IAAD,CACEc,UAAU,QACVL,MAAM,WACNM,UAAU,EACVC,QA5BM,WACdhB,GAAW,IA4BHD,QAASA,EALX,SAOE,eAAC,IAAD,CAAQQ,aAAa,KAArB,UACE,cAACZ,EAAD,CAAMa,KAAK,eAAeC,MAAM,gBAChC,cAACd,EAAD,CAAMa,KAAK,cAAcC,MAAM,eAC/B,cAACd,EAAD,CAAMa,KAAK,aAAaC,MAAM,4B,kBCzB7BQ,EAnBI,WACjB,OACE,gCACE,sBAAKhB,UAAU,OAAf,UACE,qBAAKC,IAAKC,EAAMe,MAAM,KAAKC,OAAO,KAAKf,IAAI,SAC3C,+DAGF,qBAAKH,UAAU,SAAf,SACE,mBAAGO,KAAK,wDAAR,SACE,cAACY,EAAA,EAAD,QAGJ,qBAAKnB,UAAU,YAAf,kCACA,cAAC,IAAD,Q,inFChBN,IAAMoB,EAASC,cAAH,KAiCNC,EAAKD,cAAH,KAiCFE,EAAsBF,cAAH,KAsBnBG,EAAoBH,cAAH,K,4DCtFVI,EAAS,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACvB,OACE,qBAAKtB,MAAO,CAAEuB,UAAW,GAAzB,SACGD,EAAOE,WAAaF,EAAOG,OAAO,aAM5BC,EAAsB,SAAC,GAM7B,IAAD,IALJJ,OACEK,EAIE,EAJFA,YACAC,EAGE,EAHFA,UACmBC,EAEjB,EAFFC,gBAAmBD,OAGrB,OACE,cAAC,IAAD,CACExB,KAAK,QACL0B,MAAOJ,GAAe,GACtBK,SAAU,SAACC,GACTL,EAAUK,EAAEC,OAAOH,YAASI,IAE9BC,YAAW,kBAAaP,EAAb,QAMJQ,EAAqB,SAAC,GAE5B,IAAD,IADJf,OAAuBM,GACnB,EADMD,YACN,EADmBC,WAAWE,EAC9B,EAD8BA,gBAAiBQ,EAC/C,EAD+CA,GAE7CC,EAAUC,IAAMC,SAAQ,WAC5B,IAAMF,EAAU,IAAIG,IAIpB,OAHAZ,EAAgBa,SAAQ,SAACC,GACvBL,EAAQM,IAAID,EAAIE,OAAOR,OAElB,YAAIC,EAAQO,YAClB,CAACR,EAAIR,IAEAiB,EAAWC,IAAXD,OAER,OACE,mCACE,eAAC,IAAD,CACE1C,KAAK,QACLL,MAAO,CAAEa,MAAO,KAChByB,GAAG,gBACHW,KAAK,SACLC,aAAc,OAEdlB,SAAU,SAACC,GACTL,EAAUK,QAAKE,IARnB,UAWE,cAACY,EAAD,CAAQhB,MAAM,GAAd,iBAXF,SAYGQ,EAAQY,KAAI,SAACC,GAAD,OACX,cAACL,EAAD,CAAqBhB,MAAOqB,EAA5B,SACGA,GADUA,YAUVC,EAAa,SAACC,GAAW,IAAD,EAG/BA,EADFhC,OAAUM,EAFuB,EAEvBA,UAAWE,EAFY,EAEZA,gBAGjByB,EAAW,CACfC,IAASC,SAAS,GAAI,QAAQC,QAAQ,OACtCF,IAASG,MAAM,QAGXC,EAAa,CACjBC,MAAO,CAACL,IAAUA,KAClB,aAAc,CAACA,IAASE,QAAQ,SAAUF,IAASG,MAAM,UACzD,YAAa,CACXH,IAASC,SAAS,EAAG,QAAQC,QAAQ,OACrCF,IAASG,MAAM,QAEjB,aAAc,CACZH,IAASC,SAAS,GAAI,QAAQC,QAAQ,OACtCF,IAASG,MAAM,QAEjB,gBAAiB,CACfH,IAASC,SAAS,EAAG,UAAUC,QAAQ,OACvCF,IAASG,MAAM,QAEjB,gBAAiB,CACfH,IAASC,SAAS,EAAG,UAAUC,QAAQ,OACvCF,IAASG,MAAM,SAInBG,qBAAU,WACRlC,EAAUmC,EAAaR,MAGtB,IAEH,IAAMQ,EAAe,SAAChC,GACfA,IACHA,EAAQwB,GAFoB,MAIDxB,EAJC,mBAIvBiC,EAJuB,KAIZC,EAJY,KAM9B,OAAOnC,EAAgBoC,QAAO,SAACtB,GAC7B,OACEY,EAAOZ,EAAIE,OAAO,mBAAmBqB,QAAQH,EAAUI,KACvDZ,EAAOZ,EAAIE,OAAO,mBAAmBuB,SAASJ,EAAQG,QAIpDE,EAAgBC,IAAhBD,YACR,OACE,cAACA,EAAD,CACEjE,KAAK,QACLmE,OAAO,KACPC,OAAQb,EACRV,aAAcK,EACdmB,mBAAoBnB,EACpBvB,SAAU,SAACD,GAAD,OAAWH,EAAUmC,EAAahC,Q,oCCoCnC4C,EA/JG,SAAC,GAOb,EANJvE,MAMK,IALLwE,EAKI,EALJA,IAEAC,GAGI,EAJJC,eAII,EAHJD,WACAE,EAEI,EAFJA,WAGMC,EADF,EADJC,aAGMC,EAAOL,EAEPM,EAAgBC,mBACpB,CACEJ,UACAE,OACAG,cAAe,CAAEhE,OAAQK,IAE3B4D,aACAC,YACAC,iBAIAC,EAeEN,EAfFM,cACAC,EAcEP,EAdFO,kBACAC,EAaER,EAbFQ,aACAC,EAYET,EAZFS,KACAC,EAWEV,EAXFU,KACAC,EAUEX,EAVFW,SACAC,EASEZ,EATFY,aACAC,EAQEb,EARFa,YACAC,EAOEd,EAPFc,gBACAC,EAMEf,EANFe,YACAC,EAKEhB,EALFgB,SACAC,EAIEjB,EAJFiB,UACAC,EAGElB,EAHFkB,YACAC,EAEEnB,EAFFmB,MACAC,EACEpB,EADFoB,WAGMC,EAAwBF,EAAxBE,UAAWC,EAAaH,EAAbG,SAEX1D,EAAWC,IAAXD,OAER,OACE,qCACE,cAAC,IAAD,CACE2D,WAAY,CAAEC,MAAO,WACrBvG,MAAOwE,EACP7C,MAAO6D,EAAK/D,OACZ+E,OAAQ,OAAS7B,IAInB,gDACEnF,UAAU,cACN6F,KAFN,IAIEzF,MAAO,CAAEa,MAAO,QAJlB,UAME,gCACG8E,EAAaxC,KAAI,SAAC0D,GAAD,OAChB,8CAAQA,EAAYC,uBAApB,aACGD,EAAYE,QAAQ5D,KAAI,SAAC7B,GAAD,OACvB,+CAAQA,EAAO0F,eAAe1F,EAAO2F,yBAArC,cACG3F,EAAOG,OAAO,UACf,cAAC,EAAD,CAAQH,OAAQA,mBAM1B,iDAAWoE,KAAX,aACmB,IAAhBE,EAAK/D,OACJ,oBAAIqF,QAAQ,IAAZ,SACE,cAAC,IAAD,MAGF,mCACGrB,EAAK1C,KAAI,SAACP,GAET,OADA2D,EAAW3D,GAET,8CAAQA,EAAIuE,eAAZ,aACGvE,EAAIwE,MAAMjE,KAAI,SAACkE,GACd,OACE,8CAAQA,EAAKC,gBAAb,aAA8BD,EAAK5F,OAAO,6BAU5D,gCACE,wCACO,IACL,mCACG+E,EAAY,EADf,OACsBN,EAAYrE,UACxB,OAEZ,iDACgB,IACd,cAAC,IAAD,CACE0F,IAAI,IACJlH,KAAK,QACL4C,KAAK,SACLC,aAAcsD,EAAY,EAC1BxE,SAAU,SAACC,GACT,IAAMuF,EAAavF,EAAEC,OAAOH,MACxB0F,OAAOxF,EAAEC,OAAOH,OAAS,EACzB,EACJoE,EAASqB,IAEXxH,MAAO,CAAEa,MAAO,UACR,OAEZ,cAAC,IAAD,CACER,KAAK,QACL0B,MAAO0E,EACPzE,SAAU,SAACC,GAAD,OAAOoE,EAAYoB,OAAOxF,KAHtC,SAKG,CAAC,GAAI,GAAI,IAAIkB,KAAI,SAACsD,GAAD,OAChB,eAAC1D,EAAD,CAAuBhB,MAAO0E,EAA9B,kBACQA,IADKA,QAKhB,MACD,cAAC,IAAD,CACEpG,KAAK,QACLG,QAAS,kBAAM2F,EAAS,IACxBuB,UAAWzB,EAHb,SAKE,cAAC0B,EAAA,EAAD,MACQ,IACV,cAAC,IAAD,CACEtH,KAAK,QACLG,QAAS,kBAAMuF,KACf2B,UAAWzB,EAHb,sBAMU,IACV,cAAC,IAAD,CAAQ5F,KAAK,QAAQG,QAAS,kBAAMsF,KAAY4B,UAAW1B,EAA3D,kBAEU,IACV,cAAC,IAAD,CACE3F,KAAK,QACLG,QAAS,kBAAM2F,EAASC,EAAY,IACpCsB,UAAW1B,EAHb,SAKE,cAAC4B,EAAA,EAAD,aC3JGC,EAAgB,CAC3B,CACEC,OAAQ,aACRC,OAAQ,aACRC,SAAU,iBACVC,KAAM,YAAgB,IAAblG,EAAY,EAAZA,MACP,OAAOyB,IAAO,IAAI0E,KAAKnG,IAAQyC,OAAO,OAExC2D,eAAe,EACf9G,OAAQgC,EACRa,OAAQ,SAAC0B,EAAMwC,EAAUC,GACvB,OAAOA,GAETxH,MAAO,KAUT,CACEiH,OAAQ,SACRC,OAAQ,SACRC,SAAU,aACV3G,OAAQgB,EACR6B,OAAQ,SACRiE,eAAe,EACftH,MAAO,KAET,CACEiH,OAAQ,QAERC,OAAQ,QACRC,SAAU,aACVC,KAAM,gBAAWlG,EAAX,EAAGsF,KAAQtF,MAAgBuG,EAA3B,EAAoB1F,IAAO0F,SAA3B,OACJ,mBAAGnI,KAAMmI,EAASC,KAAKC,IAAKtG,OAAO,SAASuG,IAAI,sBAAhD,SACG1G,KAGLoG,eAAe,EACftH,MAAO,KAET,CACEiH,OAAQ,SACRC,OAAQ,SACRC,SAAU,cACV3G,OAAQgB,EACRqG,gBAAgB,EAChBP,eAAe,EACftH,MAAO,KAYT,CACEiH,OAAQ,SACRC,OAAQ,SACRC,SAAU,oBACVU,gBAAgB,EAChB7H,MAAO,M,2BC6FI8H,GA5JE,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WAAiB,EAEEC,mBAAS9H,EAAQ,CAC3D+H,UAAW,CAAEjE,eAAgB+D,EAAYG,UAAWJ,EAAOK,OAAQ,MACnEC,YAAa,iBAFPC,EAFkC,EAElCA,QAASC,EAFyB,EAEzBA,MAAOlE,EAFkB,EAElBA,KAAMmE,EAFY,EAEZA,UAwB9B,OACE,sBAAKzJ,UAAU,YAAf,UACGwJ,GAAS,8BAAMA,IACfD,GACC,8BACE,cAAC,IAAD,MAGHjE,IAASiE,GACR,qCACE,8CAEA,sBACEnJ,MAAO,CACLsJ,QAAS,OACTC,UAAW,MACXC,eAAgB,SAChBC,SAAU,QALd,UAQE,cAAC,IAAD,CACEC,WAAS,EACT1J,MAAO,CACLa,MAAO,IACPC,OAAQ,GAER6I,WAAY,EACZC,YAAa,GAPjB,SAUE,sBAAK5J,MAAO,CAAEsJ,QAAS,OAAQO,cAAe,OAA9C,UACE,cAACC,EAAA,EAAD,CACE9J,MAAO,CACL+J,SAAU,GACVC,SAAU,EACVrD,MAAO,aAGX,sBAAK3G,MAAO,CAAEgK,SAAU,GAAxB,iBACO,IACL,8BACGxG,IACC,IAAI0E,KACFhD,EAAK2D,WAAWoB,OAAOC,MACrBhF,EAAK2D,WAAWoB,OAAOC,MAAMrI,OAAS,GACtC0G,KAAK4B,YAET3F,OAAO,MAAO,OATpB,KAWK,IACH,4BACGhB,IACC,IAAI0E,KAAKhD,EAAK2D,WAAWoB,OAAOC,MAAM,GAAG3B,KAAK4B,YAC9C3F,OAAO,gBAMhBU,EAAK2D,WAAWoB,OAAOlF,aACxBG,EAAK2D,WAAWoB,OAAOC,MAAMrI,OAC3B,cAAC,IAAD,CACE6H,WAAS,EACT1J,MAAO,CACLa,MAAO,IACPC,OAAQ,GAER6I,WAAY,EACZC,YAAa,GAPjB,SAUE,sBAAK5J,MAAO,CAAEsJ,QAAS,OAAQO,cAAe,OAA9C,UACE,cAACO,EAAA,EAAD,CACEpK,MAAO,CAAE+J,SAAU,GAAIC,SAAU,EAAGrD,MAAO,aAE7C,sBAAK3G,MAAO,CAAEgK,SAAU,GAAxB,8BAEE,uBACC9E,EAAK2D,WAAWoB,OAAOlF,WAH1B,kBAOF,KAEHG,EAAK2D,WAAWoB,OAAOI,SAASC,YAC/B,cAAC,IAAD,CACE1K,UAAU,kBACVI,MAAO,CACLa,MAAO,IACPC,OAAQ,GAER6I,WAAY,EACZC,YAAa,GAPjB,SAUE,sBACE5J,MAAO,CACLsJ,QAAS,OACTO,cAAe,MACfU,WAAY,YAJhB,UAQE,cAAC,IAAD,CACEvK,MAAO,CAAEa,MAAO,GAAIC,OAAQ,IAC5B0J,MAAM,SAENhK,QA9HE,WAAO,IAAD,EACW0E,EAAK2D,WAAWoB,OAAOI,SAAlDC,EADgB,EAChBA,YAAaG,EADG,EACHA,UAGjBH,GACFjB,EAAU,CACRN,UAAW,CAAEE,OAAQwB,GACrBC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBAM9B,OALAA,EAAgB/B,WAAWoB,OAAOC,MAAlC,sBACKhF,EAAK2D,WAAWoB,OAAOC,OAD5B,YAEKU,EAAgB/B,WAAWoB,OAAOC,QAGhCU,MA6GC,SAME,cAAC,KAAD,MAEF,qBAAK5K,MAAO,CAAEgK,SAAU,GAAxB,kCAIF,QAGN,cAAC,EAAD,CACEpF,IAAI,SACJE,eAAgBI,EAAK2D,WAAWgC,cAChChG,UAAWK,EAAK2D,WAAWoB,OAAOC,MAClCnF,WAAYG,EAAK2D,WAAWoB,OAAOlF,WACnCE,aAAc4C,WC3JbiD,GAAa,CACxB,CACEhD,OAAQ,aACRC,OAAQ,aACRC,SAAU,iBACVC,KAAM,YAAgB,IAAblG,EAAY,EAAZA,MACP,OAAOyB,IAAO,IAAI0E,KAAKnG,IAAQyC,OAAO,OAExC2D,eAAe,EACf9G,OAAQgC,EACRa,OAAQ,SAAC0B,EAAMwC,EAAUC,GACvB,OAAOA,GAETxH,MAAO,KAUT,CACEiH,OAAQ,SACRC,OAAQ,SACRC,SAAU,aACV3G,OAAQgB,EACR6B,OAAQ,SACRiE,eAAe,EACftH,MAAO,KAET,CACEiH,OAAQ,QACRC,OAAQ,QACRC,SAAU,aACVC,KAAM,gBAAWlG,EAAX,EAAGsF,KAAQtF,MAAgBuG,EAA3B,EAAoB1F,IAAO0F,SAA3B,OACJ,mBAAGnI,KAAMmI,EAASC,KAAKC,IAAKtG,OAAO,SAASuG,IAAI,sBAAhD,SACG1G,KAGLoG,eAAe,EACftH,MAAO,KAET,CACEiH,OAAQ,SACRC,OAAQ,SACRC,SAAU,cACV3G,OAAQgB,EACRqG,gBAAgB,EAChBP,eAAe,EACftH,MAAO,KAYT,CACEiH,OAAQ,SACRC,OAAQ,SACRC,SAAU,oBACVU,gBAAgB,EAChB7H,MAAO,MC6FIkK,GA3JQ,SAAC,GAA2B,IAAzBnC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WAAiB,EAEJC,mBAAS5H,EAAI,CACvD6H,UAAW,CAAEjE,eAAgB+D,EAAYG,UAAWJ,EAAOK,OAAQ,MACnEC,YAAa,iBAFPC,EAFwC,EAExCA,QAASC,EAF+B,EAE/BA,MAAOlE,EAFwB,EAExBA,KAAMmE,EAFkB,EAElBA,UAyB9B,OACE,sBAAKzJ,UAAU,mBAAf,UACGwJ,GAAS,8BAAMA,IACfD,GACC,8BACE,cAAC,IAAD,MAGHjE,IAASiE,GACR,qCACE,qDAEA,sBACEnJ,MAAO,CACLsJ,QAAS,OACTC,UAAW,MACXC,eAAgB,SAChBC,SAAU,QALd,UAQE,cAAC,IAAD,CACEC,WAAS,EACT1J,MAAO,CACLa,MAAO,IACPC,OAAQ,GAER6I,WAAY,EACZC,YAAa,GAPjB,SAUE,sBAAK5J,MAAO,CAAEsJ,QAAS,OAAQO,cAAe,OAA9C,UACE,cAACC,EAAA,EAAD,CACE9J,MAAO,CAAE+J,SAAU,GAAIC,SAAU,EAAGrD,MAAO,aAE7C,sBAAK3G,MAAO,CAAEgK,SAAU,GAAxB,iBACO,IACL,8BACGxG,IACC,IAAI0E,KACFhD,EAAK2D,WAAWmC,aAAad,MAC3BhF,EAAK2D,WAAWmC,aAAad,MAAMrI,OAAS,GAC5C0G,KAAK4B,YAET3F,OAAO,MAAO,OATpB,KAWK,IACH,4BACGhB,IACC,IAAI0E,KACFhD,EAAK2D,WAAWmC,aAAad,MAAM,GAAG3B,KAAK4B,YAE7C3F,OAAO,gBAMhBU,EAAK2D,WAAWmC,aAAajG,aAC9BG,EAAK2D,WAAWmC,aAAad,MAAMrI,OACjC,cAAC,IAAD,CACE6H,WAAS,EACT1J,MAAO,CACLa,MAAO,IACPC,OAAQ,GAER6I,WAAY,EACZC,YAAa,GAPjB,SAUE,sBAAK5J,MAAO,CAAEsJ,QAAS,OAAQO,cAAe,OAA9C,UACE,cAACO,EAAA,EAAD,CACEpK,MAAO,CAAE+J,SAAU,GAAIC,SAAU,EAAGrD,MAAO,aAE7C,sBAAK3G,MAAO,CAAEgK,SAAU,GAAxB,8BAEE,uBACC9E,EAAK2D,WAAWmC,aAAajG,WAHhC,wBAOF,KAEHG,EAAK2D,WAAWmC,aAAaX,SAASC,YACrC,cAAC,IAAD,CACE1K,UAAU,kBACVI,MAAO,CACLa,MAAO,IACPC,OAAQ,GAER6I,WAAY,EACZC,YAAa,GAPjB,SAUE,sBACE5J,MAAO,CACLsJ,QAAS,OACTO,cAAe,MACfU,WAAY,YAJhB,UAQE,cAAC,IAAD,CACEvK,MAAO,CAAEa,MAAO,GAAIC,OAAQ,IAC5B0J,MAAM,SAENhK,QA5HE,WAAO,IAAD,EACW0E,EAAK2D,WAAWmC,aAAaX,SAAxDC,EADgB,EAChBA,YAAaG,EADG,EACHA,UAGjBH,GACFjB,EAAU,CACRN,UAAW,CAAEE,OAAQwB,GACrBC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBAM9B,OALAA,EAAgB/B,WAAWmC,aAAad,MAAxC,sBACKhF,EAAK2D,WAAWmC,aAAad,OADlC,YAEKU,EAAgB/B,WAAWmC,aAAad,QAGtCU,MA2GC,SAME,cAAC,KAAD,MAEF,qBAAK5K,MAAO,CAAEgK,SAAU,GAAxB,kCAIF,QAEN,cAAC,EAAD,CACE5J,MAAM,sBACNwE,IAAI,gBACJE,eAAgBI,EAAK2D,WAAWgC,cAChChG,UAAWK,EAAK2D,WAAWmC,aAAad,MACxCnF,WAAYG,EAAK2D,WAAWmC,aAAajG,WACzCE,aAAc6F,Y,iDCLXG,GA7IY,SAAC,GAA2B,IAAzBrC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WAAiB,EAEnBC,mBAAS3H,EAAqB,CAC7D4H,UAAW,CAAEjE,eAAgB+D,EAAYG,UAAWJ,KAD9CO,EAF4C,EAE5CA,QAASC,EAFmC,EAEnCA,MAAOlE,EAF4B,EAE5BA,KAiIxB,OACE,eAAC,IAAD,CAAMtF,UAAU,sBAAhB,UACE,qDACCwJ,GAAS,8BAAMA,IACfD,GAAW,cAAC,IAAD,IACXjE,IAASiE,GA9HV,sBAAKvJ,UAAU,cAAf,UACE,cAAC,KAAD,CAASsL,YAAY,SAASC,OAAK,EAAnC,oBAIA,eAAC,KAAD,CAAKC,OAAQ,GAAb,UACE,cAAC,KAAD,CAAKC,KAAM,GAAX,SACE,cAAC,IAAD,CACEjL,MACE,cAAC,KAAD,CAASA,MAAM,cAAf,SACE,sBAAMJ,MAAO,CAAE2G,MAAO,WAAtB,SACE,cAAC,KAAD,QAIN5E,MAAOmD,EAAK2D,WAAWyC,WAAWvG,eAGtC,cAAC,KAAD,CAAKsG,KAAM,GAAX,SACE,cAAC,IAAD,CACEjL,MACE,cAAC,KAAD,CAASA,MAAM,gBAAf,SACE,sBAAMJ,MAAO,CAAE2G,MAAO,WAAtB,SACE,cAAC,KAAD,QAIN5E,MAAOmD,EAAK2D,WAAW0C,aAAaxG,kBAK1C,cAAC,KAAD,CAASmG,YAAY,SAASC,OAAK,EAAnC,2BAIA,eAAC,KAAD,CAAKC,OAAQ,GAAb,UACE,cAAC,KAAD,CAAKC,KAAM,EAAX,SACE,cAAC,IAAD,CACEjL,MACE,cAAC,KAAD,CAASA,MAAM,WAAf,SACE,sBAAMJ,MAAO,CAAE2G,MAAO,WAAtB,SACE,cAAC,KAAD,QAIN5E,MAAOmD,EAAK2D,WAAW2C,QAAQzG,eAGnC,cAAC,KAAD,CAAKsG,KAAM,EAAX,SACE,cAAC,IAAD,CACEjL,MACE,cAAC,KAAD,CAASA,MAAM,aAAf,SACE,sBAAMJ,MAAO,CAAE2G,MAAO,WAAtB,SACE,cAAC,KAAD,QAIN5E,MAAOmD,EAAK2D,WAAW4C,UAAU1G,eAGrC,cAAC,KAAD,CAAKsG,KAAM,EAAX,SACE,cAAC,IAAD,CACEjL,MACE,cAAC,KAAD,CAASA,MAAM,aAAf,SACE,sBAAMJ,MAAO,CAAE2G,MAAO,aAAtB,SACE,cAAC,KAAD,QAIN5E,MAAOmD,EAAK2D,WAAW6C,UAAU3G,kBAKvC,cAAC,KAAD,CAASmG,YAAY,SAASC,OAAK,EAAnC,wBAIA,qBAAKvL,UAAU,2BAAf,SACE,eAAC,KAAD,CAAKwL,OAAQ,EAAb,UACE,cAAC,KAAD,CAAKC,KAAM,GAAX,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CACEjL,MAAM,gBACN2B,MACGmD,EAAK2D,WAAW0C,aAAaxG,YAC3BG,EAAK2D,WAAWyC,WAAWvG,WAC1BG,EAAK2D,WAAW0C,aAAaxG,YAC/B,KAAO,EAEX4G,UAAW,EACXjF,WAAY,CAAEC,MAAO,WACrBiF,OAAQ,cAACC,GAAA,EAAD,IACRjF,OAAO,UAIb,cAAC,KAAD,CAAKyE,KAAM,GAAX,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CACEjL,MAAM,aACN2B,MACGmD,EAAK2D,WAAW6C,UAAU3G,YACxBG,EAAK2D,WAAW2C,QAAQzG,WACvBG,EAAK2D,WAAW6C,UAAU3G,YAC9B,IAEF4G,UAAW,EACXjF,WAAY,CAAEC,MAAO,WACrBiF,OAAQ,cAACC,GAAA,EAAD,IACRjF,OAAO,sB,UC5EVkF,GAjDS,SAAC,GAA2B,IAAzBlD,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WAAiB,EAEhBC,mBAAS1H,EAAmB,CAC3D2H,UAAW,CAAEjE,eAAgB+D,EAAYG,UAAWJ,KAD9CO,EAFyC,EAEzCA,QAASC,EAFgC,EAEhCA,MAAOlE,EAFyB,EAEzBA,KAMxB,OACE,eAAC,IAAD,CAAMtF,UAAU,oBAAhB,UACE,8CACCwJ,GAAS,4BAAIA,IACbD,GAAW,cAAC,IAAD,IACXjE,IAASiE,GACR,qBAAKvJ,UAAU,cAAf,SACE,sBAAKA,UAAU,YAAf,UACE,wCACQ,cAACmM,GAAA,EAAD,IADR,KAC2B7G,EAAK8G,KAAKC,KAAKlH,cAE1C,0DACCG,EAAK8G,KAAKC,KAAK/B,OAAShF,EAAK8G,KAAKC,KAAKlH,WACtC,gCACE,uCAAUG,EAAK8G,KAAKC,KAAK/B,MAAM,GAAG3B,KAAKrG,OAAOgK,QAC9C,8CACgBhH,EAAK8G,KAAKC,KAAK/B,MAAM,GAAG3B,KAAKrG,OAAOiK,WAEpD,8CACgB,IACbjH,EAAK8G,KAAKC,KAAK/B,MAAM,GAAG3B,KAAKrG,OAAOkK,QACnC5I,IACE,IAAI0E,KAAKhD,EAAK8G,KAAKC,KAAK/B,MAAM,GAAG3B,KAAKrG,OAAOkK,OAAOC,OACpD7H,OAAO,SAEb,wCACU,IACPU,EAAK8G,KAAKC,KAAK/B,MAAM,GAAG3B,KAAKrG,OAAOkK,QACnClH,EAAK8G,KAAKC,KAAK/B,MAAM,GAAG3B,KAAKrG,OAAOkK,OAAOF,WAIjD,cAAC,IAAD,CAAOI,YAAa,8CC/CrBC,GAAe,CAC1B,CAAE3D,MAAO,UAAW4D,KAAM,kBAC1B,CAAE5D,MAAO,UAAW4D,KAAM,2BAC1B,CAAE5D,MAAO,UAAW4D,KAAM,qBAC1B,CAAE5D,MAAO,oBAAqB4D,KAAM,gBACpC,CAAE5D,MAAO,oBAAqB4D,KAAM,YACpC,CAAE5D,MAAO,oBAAqB4D,KAAM,mBACpC,CAAE5D,MAAO,oBAAqB4D,KAAM,mBCwBvBC,GA5BY,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,mBACtBC,EAAeJ,GAGbxJ,EAAWC,IAAXD,OAER,OACE,eAAC,IAAD,CAAMnD,UAAU,sBAAhB,UACE,mDACA,cAAC,IAAD,CACEoC,SAAU,SAACC,GAAD,OAAOyK,EAAmBzK,EAAE,GAAIA,EAAE,KAC5C2K,YAAU,EACV1J,aACE2J,KAAKC,MAAMC,aAAaC,QAAQ,0BAA0BR,MAC1DG,EAAa,GAAGH,KAElBxM,MAAO,CAAEa,MAAO,QAPlB,SASG8L,EAAaxJ,KAAI,SAAC0F,EAAYoE,GAAb,OAChB,cAAClK,EAAD,CAAoBhB,MAAO,CAAC8G,EAAW2D,KAAM3D,EAAWD,OAAxD,SACGC,EAAW2D,MADDS,Y,UCyCRC,GAtDK,WAAM,MAEYzN,mBAClCoN,KAAKC,MAAMC,aAAaC,QAAQ,2BAA6BT,GAAa,IAHpD,mBAEjB1D,EAFiB,KAELsE,EAFK,KAYxB,OAFAJ,aAAaK,QAAQ,wBAAyBP,KAAKQ,UAAUxE,IAG3D,qBAAKjJ,UAAU,cAAf,SACE,sBAAKA,UAAU,sBAAf,UACE,sBAAKA,UAAU,4BAAf,UACE,8BACE,cAAC,GAAD,CAAoB8M,mBAXH,SAAC9D,EAAO4D,GACjCW,EAAc,CAAEvE,MAAOA,EAAO4D,KAAMA,SAY9B,8BACE,cAAC,GAAD,CACE5D,MAAOC,EAAWD,MAClBC,WAAYA,EAAW2D,SAG3B,8BACE,cAAC,GAAD,CACE5D,MAAOC,EAAWD,MAClBC,WAAYA,EAAW2D,YAI7B,sBAAK5M,UAAU,SAAf,UACE,cAAC,KAAD,CACEA,UAAU,cACVQ,MAAM,SACNkN,SAAUzE,EAAW2D,OAEvB,8BACE,cAAC,GAAD,CAAU5D,MAAOC,EAAWD,MAAOC,WAAYA,EAAW2D,SAE5D,cAAC,KAAD,CAASrB,OAAK,EAACnL,MAAO,CAAEuN,gBAAiB,aACzC,8BACE,cAAC,GAAD,CACE3E,MAAOC,EAAWD,MAClBC,WAAYA,EAAW2D,kB,UCtDxBgB,GAAQ,CACnB,SACA,SACA,WACA,WACA,WACA,YACA,e,+qCCLqBvM,cAAH,MAApB,IAaMwM,GAAoBxM,cAAH,MAYjByM,GAA0BzM,cAAH,MC6Od0M,GA9PK,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,kBACjBC,EAAiBtB,GAAapJ,KAChC,SAAC0F,GAAD,gBAAmBA,EAAWD,MAA9B,YAAuCC,EAAW2D,SAM9CsB,GADND,EAAiBA,EAAe1K,KAAI,SAAC4K,GAAD,MAAU,QAAUA,MACjBC,KAAK,KARC,EAYCvO,mBAC5C+D,IAASC,SAAS,EAAG,SAASe,OAAO,cAAcyJ,WACjD,KACAzK,IAASgB,OAAO,cAAcyJ,YAfW,mBAYtCC,EAZsC,KAYrBC,EAZqB,KAmBvCC,EAAoB,UAAMN,EAAN,8BAA2CF,EAA3C,oBAAwEM,GAC5FG,EAAsB,UAAMP,EAAN,wCAAqDF,EAArD,oBAAkFM,GACxGI,EAAiB,UAAMR,EAAN,2BAAwCF,EAAxC,oBAAqEM,GACtFK,EAAmB,UAAMT,EAAN,qCAAkDF,EAAlD,oBAA+EM,GAClGM,EAA4B,UAAMV,EAAN,mBAAgCF,EAAhC,oBAA6DM,GAvBlD,EA8BzCpF,mBAAS4E,GAAyB,CACpC3E,UAAW,CACT0F,qBAAsBL,EACtBM,uBAAwBL,EACxBM,kBAAmBL,EACnBM,oBAAqBL,EACrBM,iBAAkBL,KATXM,EA3BkC,EA2B3C3F,QACO4F,EA5BoC,EA4B3C3F,MACM4F,EA7BqC,EA6B3C9J,KA7B2C,EA+CzC4D,mBAAS2E,GAAmB,CAC9B1E,UAAW,CAAEkG,SAAUrB,KAJdsB,EA5CkC,EA4C3C/F,QACOgG,EA7CoC,EA6C3C/F,MACMgG,EA9CqC,EA8C3ClK,KAOMnC,EAAqBC,IAArBD,OAAQsM,EAAarM,IAAbqM,SAgMhB,OACE,sBAAKzP,UAAU,eAAf,UACGsP,GAAe,cAAC,IAAD,IACfC,GAAa,4BAAIA,IACjBC,IAAaF,GAhMd,gCAEE,sBAAKtP,UAAU,eAAf,UACE,qBAAKC,IAAKuP,EAASE,KAAKC,UAAWxP,IAAI,qBACvC,6BACE,mBACEI,KAAMiP,EAASE,KAAK9G,IACpBtG,OAAO,SACPuG,IAAI,sBAHN,SAKG2G,EAASE,KAAKpD,SAGnB,4BAAIkD,EAASE,KAAKE,QAGlB,eAAC,IAAD,CAAM5P,UAAU,kBAAhB,UACE,6CACA,eAAC,IAAD,CACEI,MAAO,CAAEa,MAAO,KAChBqC,aAAcgL,EACdlM,SAAU,SAACC,GAETkM,EAAmBlM,IALvB,UAQE,cAACc,EAAD,CAAQhB,MAAK,YAAOyB,IAASgB,OAAO,cAAcyJ,YAAlD,qBAGA,cAAClL,EAAD,CACEhB,MACEyB,IAASC,SAAS,EAAG,QAAQe,OAAO,cAAcyJ,WAClD,KACAzK,IAASgB,OAAO,cAAcyJ,WAJlC,uBASA,cAAClL,EAAD,CACEhB,MACEyB,IACGC,SAAS,EAAG,SACZe,OAAO,cACPyJ,WACH,KACAzK,IAASgB,OAAO,cAAcyJ,WAPlC,wBAYA,cAAClL,EAAD,CACEhB,MACEyB,IAASC,SAAS,EAAG,QAAQe,OAAO,cAAcyJ,WAClD,KACAzK,IAASgB,OAAO,cAAcyJ,WAJlC,uBASA,eAACoB,EAAD,CAAUI,MAAM,eAAhB,UACE,cAAC1M,EAAD,CACEhB,MACEyB,IACGkM,MAAM,OACNhM,QAAQ,SACRc,OAAO,cACPyJ,WACH,KACAzK,IACGkM,MAAM,OACN/L,MAAM,SACNa,OAAO,cACPyJ,WAZP,mBAeMzK,IAASkM,MAAM,OAAOlL,OAAO,WAfnC,cAemDhB,IAC9CkM,MAAM,OACNlL,OAAO,cAEZ,cAACzB,EAAD,CACEhB,MACEyB,IACGkM,MAAM,OACNhM,QAAQ,SACRc,OAAO,cACPyJ,WACH,KACAzK,IACGkM,MAAM,OACN/L,MAAM,SACNa,OAAO,cACPyJ,WAZP,mBAeMzK,IAASkM,MAAM,OAAOlL,OAAO,WAfnC,cAemDhB,IAC9CkM,MAAM,OACNlL,OAAO,cAEZ,cAACzB,EAAD,CACEhB,MACEyB,IACGkM,MAAM,OACNhM,QAAQ,SACRc,OAAO,cACPyJ,WACH,KACAzK,IACGkM,MAAM,OACN/L,MAAM,SACNa,OAAO,cACPyJ,WAZP,mBAeMzK,IAASkM,MAAM,OAAOlL,OAAO,WAfnC,cAemDhB,IAC9CkM,MAAM,OACNlL,OAAO,cAEZ,cAACzB,EAAD,CACEhB,MACEyB,IACGkM,MAAM,OACNhM,QAAQ,SACRc,OAAO,cACPyJ,WACH,KACAzK,IACGkM,MAAM,OACN/L,MAAM,SACNa,OAAO,cACPyJ,WAZP,mBAeMzK,IAASkM,MAAM,OAAOlL,OAAO,WAfnC,cAemDhB,IAC9CkM,MAAM,OACNlL,OAAO,0BAQnBsK,GAAuB,cAAC,IAAD,IACvBC,GAAqB,4BAAIA,IACzBC,IAAqBF,GACpB,sBAAKlP,UAAU,2BAAf,UACE,cAAC,IAAD,CACEA,UAAU,sBACVQ,MAAM,qBACNC,KAAK,QAHP,SAKE,6BAAK2O,EAAiBW,mBAAmBC,eAE3C,cAAC,IAAD,CACEhQ,UAAU,sBACVQ,MAAM,gBACNC,KAAK,QAHP,SAKE,6BAAK2O,EAAiBa,YAAYD,eAEpC,cAAC,IAAD,CACEhQ,UAAU,sBACVQ,MAAM,gBACNC,KAAK,QAHP,SAKE,6BAAK2O,EAAiBc,cAAcF,eAEtC,cAAC,IAAD,CACEhQ,UAAU,sBACVQ,MAAM,aACNC,KAAK,QAHP,SAKE,6BAAK2O,EAAiBe,QAAQH,eAEhC,cAAC,IAAD,CACEhQ,UAAU,sBACVQ,MAAM,aACNC,KAAK,QAHP,SAKE,6BAAK2O,EAAiBgB,UAAUJ,kBAItC,qBAAKhQ,UAAU,4B,8FCpOvB,IAAMqQ,GAA0B,SAACC,GAAD,OAASA,EAAIC,QAAQ,iBAAkB,KAcjEC,GAAiB,SAAClE,EAAMtD,EAAOgF,GACnC,MAAM,QAAN,OACGqC,GACA/D,GACAmE,cAHH,mCAbiB,SAAC7D,EAAM5D,EAAOgF,GAAd,sBACRhF,EADQ,YACC4D,EADD,2BACwBoB,EADxB,KAgB0B0C,CACzCpE,EACAtD,EACAgF,GANF,wFAWGqC,GACA/D,GACAmE,cAbH,qCAVmB,SAAC7D,EAAM5D,EAAOgF,GAAd,sBACVhF,EADU,YACD4D,EADC,qCACgCoB,EADhC,KAuB0B2C,CAC3CrE,EACAtD,EACAgF,GAhBF,6EAqBGqC,GACA/D,GACAmE,cAvBH,sCAPoB,SAAC7D,EAAM5D,EAAOgF,GAAd,sBACXhF,EADW,YACF4D,EADE,8BACwBoB,EADxB,KA8B0B4C,CAC5CtE,EACAtD,EACAgF,GA1BF,wFA+BGqC,GACA/D,GACAmE,cAjCH,wCAJsB,SAAC7D,EAAM5D,EAAOgF,GAAd,sBACbhF,EADa,YACJ4D,EADI,wCACgCoB,EADhC,KAqC0B6C,CAC9CvE,EACAtD,EACAgF,GApCF,6FA6CI8C,GAAa,SAAC9C,GAClB,IADwC,EACpC8C,EAAU,GAD0B,eAEjBnE,IAFiB,IAExC,2BAAqC,CAAC,IAA7B1D,EAA4B,QACnC6H,GAAcN,GACZvH,EAAW2D,KACX3D,EAAWD,MACXgF,IANoC,8BAUxC,OAAO8C,GCtDMC,GAjCe,SAAC,GAAc,IAAZzL,EAAW,EAAXA,KAK/B,OACE,qBAAKtF,UAAU,0BAAf,SACE,qBAAKA,UAAU,gCAAf,SACG2M,GAAapJ,KAAI,WAAW8J,GAAW,IAVfiD,EAUJ1D,EAAkB,EAAlBA,KACbN,GAXiBgE,EAWc1D,EAXN0D,EAAIC,QAAQ,iBAAkB,KAWlBE,cACrC/E,EAAapG,EAAKgH,EATd,eASgC0D,WACpCrE,EAAerG,EAAKgH,EATd,iBASkC0D,WACxCgB,EAAU1L,EAAKgH,EARZ,cAQ6B0D,WAChCiB,EAAY3L,EAAKgH,EAVhB,YAU+B0D,WAKtC,OAFEtE,EAAaC,EAAeqF,EAAUC,EAGtC,sBAAiBjR,UAAU,gCAA3B,UACE,6BAAK4M,IACL,gDAAmBlB,KACnB,gDAAmBC,KACnB,2CAAcqF,KACd,6CAAgBC,OALR5D,GAOR,aCVC6D,GAhBK,SAAC,GAA2B,IAAzBlD,EAAwB,EAAxBA,kBAAwB,EAEZ9E,mBFwFE,SAAC8E,GACpC,IAAImD,EAAK,yCAEGL,GAAW9C,GAFd,uBAST,OAFAoD,QAAQC,IAAI,yBAA0BP,GAAW9C,IAE1C3M,cAAP,KACI8P,GElGFG,CAA6BtD,IADvBzE,EAFqC,EAErCA,QAASC,EAF4B,EAE5BA,MAAOlE,EAFqB,EAErBA,KAIxB,OACE,sBAAKtF,UAAU,eAAf,UACE,2EAA8CgO,KAC7CzE,GAAW,cAAC,IAAD,IACXC,GAAS,4BAAIA,IACblE,GAAQ,cAAC,GAAD,CAAuBA,KAAMA,QCM7BiM,GAlBU,SAAC,GAA2B,IAAzBvD,EAAwB,EAAxBA,kBAG1B,OACE,sBAAKhO,UAAU,oBAAf,UACE,cAAC,KAAD,CACEA,UAAU,cACVQ,MAAM,YACNkN,SAAUM,IAGZ,cAAC,GAAD,CAAaA,kBAAmBA,IAChC,cAAC,KAAD,CAASzC,OAAK,EAACnL,MAAO,CAAEuN,gBAAiB,aACzC,cAAC,GAAD,CAAaK,kBAAmBA,Q,UCbhCwD,GAAgB,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,kBAAmBC,EAAkB,EAAlBA,YAAkB,EACxB7R,mBAAS,IADe,mBACrD8R,EADqD,KACzCC,EADyC,OAElB/R,mBAAS,IAFS,mBAErDgS,EAFqD,KAEtCC,EAFsC,KAOtDC,EAAQnE,GAad,OAPA1J,qBAAU,WACR,IAAM8N,EAAUD,EAAMzN,QAAO,SAACoL,GAAD,OAC3BA,EAAKuC,cAAcC,SAASP,EAAWM,kBAEzCH,EAAiBE,KAChB,CAACL,EAAYI,IAGd,sBAAK/R,UAAU,iBAAf,UACE,6CACA,cAAC,IAAD,CACES,KAAK,QACL0R,YAAY,EACZ3P,YAAW,kBAAauP,EAAM9P,OAAnB,KACXE,MAAOwP,EACPvP,SAAU,SAACC,GAAD,OAnBK,SAACA,GACpBuP,EAAcvP,GAkBO+P,CAAa/P,EAAEC,OAAOH,UAEzC,cAAC,KAAD,UACG0P,EAActO,KAAI,SAAC4K,EAAMd,GAAP,OACjB,mBAEElL,MAAOgM,EACPvN,QAAS,SAACyB,GACRoP,EAAkBtD,GAClBuD,KALJ,SAQGvD,GAPId,YAejBmE,GAAca,aAAe,CAC3BX,YAAa,cAGAF,UCiBAc,GAlEI,WAAM,MAE2BzS,mBAChDsN,aAAaC,QAAQ,SAAWQ,GAAM,IAHjB,mBAEhBI,EAFgB,KAEGuE,EAFH,KAKjBd,EAAoB,SAACzD,GACzBuE,EAAqBvE,IAGvBb,aAAaK,QAAQ,OAAQQ,GATN,MAaOnO,oBAAS,GAbhB,mBAahBC,EAbgB,KAaPC,EAbO,KAmBjBgB,EAAU,WACdhB,GAAW,IAGb,OACE,qBAAKC,UAAU,aAAf,SACE,sBAAKA,UAAU,qBAAf,UAEE,cAAC,IAAD,CAAMA,UAAU,WAAhB,SACE,cAAC,GAAD,CAAeyR,kBAAmBA,MAGpC,sBAAKzR,UAAU,iBAAf,UACE,cAAC,IAAD,CACEU,KAAM,cAAC8R,GAAA,EAAD,IACN/R,KAAK,QACLG,QApBS,WACjBb,GAAW,MAqBL,cAAC,IAAD,CACEc,UAAU,OACVC,UAAU,EACVC,QAASA,EACTjB,QAASA,EACT2S,cAAc,EACdC,YAAa,CAAE/E,gBAAiB,WANlC,SAQE,qBAAK3N,UAAU,kBAAf,SACE,cAAC,GAAD,CACEyR,kBAAmBA,EACnBC,YAAa3Q,WAKrB,sBAAKf,UAAU,cAAf,WACIgO,GACA,2EAEDA,GACC,cAAC,GAAD,CAAkBA,kBAAmBA,aC7D3C2E,GAAiB,SAAC,GAAyC,IAAvC7F,EAAsC,EAAtCA,mBAAoB4E,EAAkB,EAAlBA,YAAkB,EACd7R,mBAAS,IADK,mBACvD+S,EADuD,KACrCC,EADqC,OAEpBhT,mBAAS,IAFW,mBAEvDgS,EAFuD,KAExCC,EAFwC,KAIxD/E,EAAeJ,GAerB,OAPAzI,qBAAU,WACR,IAAM8N,EAAUjF,EAAazI,QAAO,SAAC2E,GAAD,OAClCA,EAAU,KAASgJ,cAAcC,SAASU,EAAiBX,kBAE7DH,EAAiBE,KAChB,CAACY,EAAkB7F,IAGpB,sBAAK/M,UAAU,kBAAf,UACE,+CACA,cAAC,IAAD,CACES,KAAK,QACL+B,YAAW,kBAAaqP,EAAc5P,OAA3B,KACXkQ,YAAY,EACZhQ,MAAOyQ,EACPxQ,SAAU,SAACC,GAAD,OApBK,SAACA,GAEpBwQ,EAAoBxQ,GAkBC+P,CAAa/P,EAAEC,OAAOH,UAEzC,cAAC,KAAD,UACG0P,EAActO,KAAI,SAAC4K,EAAMd,GAAP,OACjB,mBAEElL,MAAOgM,EACPvN,QAAS,SAACyB,GACRyK,EAAmBqB,GACnBuD,KALJ,SAQGvD,EAAKvB,MAPDS,YAejBsF,GAAeN,aAAe,CAC5BX,YAAa,cAGAiB,U,ivCCrDf,IAAMG,GAA4BzR,cAAH,MAyBzB0R,GAAwB1R,cAAH,MCzBd2R,GAAuB,SAAC1N,GACnC,IAAI2N,EAAsB,EAc1B,OAbA3N,EAAKvC,SAAQ,SAACoL,GACZ,IAAM/J,EAAYR,IAAOuK,EAAK5D,WAIxB2I,GAHU/E,EAAKgF,SACjBvP,IAAOuK,EAAKgF,UACZvP,IAAOuK,EAAKiF,WACKF,KAAK9O,EAAW,QACrC6O,GAAuBC,KAOlBG,KAAKC,MAAML,EAAsB3N,EAAKrD,S,6BCgFhCsR,GA5FG,SAAC,GAAkD,IAA5BjO,EAA2B,EAA/CkO,mBAA0B3D,EAAqB,EAArBA,MAAO4D,EAAc,EAAdA,QAE9CC,EAAa,CACjBC,OAAQrO,EAAK/B,KAAI,SAAC4K,GAAD,OAAUA,EAAKyF,SAChCC,SAAU,CACR,CACEhE,MAAOA,EACPiE,MAAM,EACNC,YAAa,GAEbpG,gBAAiB,0BACjBqG,YAAa,uBACbC,YAAa,EACbC,eAAgB,OAChBC,WAAY,GACZC,iBAAkB,EAClBC,gBAAiB,QACjBC,iBAAkB,uBAClBC,qBAAsB,OACtBC,iBAAkB,EAClBC,iBAAkB,EAClBC,0BAA2B,mBAC3BC,sBAAuB,sBACvBC,sBAAuB,EACvBC,YAAa,EACbC,eAAgB,GAEhBxP,KAAMA,EAAK/B,KAAI,SAAC4K,GAAD,OACXA,EAAK4G,QAAU5G,EAAK6G,KAAO7G,EAAK4G,QAAW,KAAO,GAAGE,QAAQ,SAuCjEC,EACJ,sBAAK9U,MAAO,CAAE+U,UAAW,UAAzB,UACE,uMAKA,cAAC,KAAD,CACEhT,MAAO,sEAKb,OACE,sBAAKnC,UAAU,aAAf,UACE,cAAC,KAAD,CAASQ,MAAO0U,EAAhB,SACE,cAACE,GAAA,EAAD,MAGF,6BAAK3B,IACL,cAAC,QAAD,CAAMnO,KAAMoO,EAAY/Q,QArDb,CACb0S,OAAQ,CACNC,MAAO,CACL,CACEC,WAAY,CACV7L,SAAS,EACT8L,YAAa,wBAInBC,MAAO,CACL,CACEC,MAAO,CACLC,UAAU,EACVC,YAAa,GACbC,YAAa,OAKrBC,SAAU,CACRC,UAAW,CACTlG,MAAO,SAAUmG,EAAa1Q,GAG5B,OAFcA,EAAKuO,SAASmC,EAAYC,cACb3Q,KAAK0Q,EAAY3I,OACtB,c,UCmBjB6I,GA/EE,SAAC,GAA2D,IAArC5Q,EAAoC,EAAxDkO,mBAA0B2C,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQ3C,EAAc,EAAdA,QAEtDC,EAAa,CACjBC,OAAQrO,EAAK/B,KAAI,SAAC4K,GAAD,OAAUA,EAAKyF,SAChCC,SAAU,CACR,CACEhE,MAAOsG,EACPrC,MAAM,EACNC,YAAa,GACbpG,gBAAiB,sBACjBqG,YAAa,oBACbC,YAAa,EACbC,eAAgB,OAChBC,WAAY,GACZC,iBAAkB,EAClBC,gBAAiB,QACjBC,iBAAkB,qBAClBC,qBAAsB,OACtBC,iBAAkB,EAClBC,iBAAkB,EAClBC,0BAA2B,qBAC3BC,sBAAuB,sBACvBC,sBAAuB,EACvBC,YAAa,EACbC,eAAgB,GAChBxP,KAAMA,EAAK/B,KAAI,SAAC4K,GACd,OAAOA,EAAK6G,SAGhB,CACEnF,MAAOuG,EACPtC,MAAM,EACNC,YAAa,GACbpG,gBAAiB,uBACjBqG,YAAa,qBACbC,YAAa,EACbC,eAAgB,OAChBC,WAAY,GACZC,iBAAkB,EAClBC,gBAAiB,QACjBC,iBAAkB,qBAClBC,qBAAsB,OACtBC,iBAAkB,EAClBC,iBAAkB,EAClBC,0BAA2B,qBAC3BC,sBAAuB,sBACvBC,sBAAuB,EACvBC,YAAa,EACbC,eAAgB,GAChBxP,KAAMA,EAAK/B,KAAI,SAAC4K,GACd,MAAkB,iBAAXiI,EAA4BjI,EAAK4G,OAAS5G,EAAKkI,aAMxDnB,EACJ,qBAAK9U,MAAO,CAAE+U,UAAW,UAAzB,SACE,qCACmB,qBAAZ1B,EAAiC,SAAW,gBADnD,iCAE4B,IACb,qBAAZA,EAAiC,SAAW,gBAH/C,mBAIyB,qBAAZA,EAAiC,WAAa,WAAY,IAJvE,mEAUJ,OACE,sBAAKzT,UAAU,YAAf,UACE,cAAC,KAAD,CAASQ,MAAO0U,EAAhB,SACE,cAACoB,GAAA,EAAD,MAEF,6BAAK7C,IACL,cAAC,OAAD,CAAKnO,KAAMoO,Q,UCXF6C,GA9DO,SAAC,GAA+C,IAA7C9C,EAA4C,EAA5CA,QAAS0C,EAAmC,EAAnCA,OAAQK,EAA2B,EAA3BA,MAElC9C,EAAa,CACjBC,OAAQ,CAHyD,EAApByC,OAG5BD,GACjBtC,SAAU,CACR,CACEvO,KAAM,CANuD,EAAZmR,MAMnCD,GACd7I,gBAAiB,CAAC,UAAW,WAC7B+I,qBAAsB,CAAC,UAAW,cAKlClT,EAAS,CACbsS,SAAU,CACRC,UAAW,CACTlG,MAAO,SAAUmG,EAAa1Q,GAC5B,IAAIqR,EAAUrR,EAAKuO,SAASmC,EAAYC,cAEpCW,EADOD,EAAQE,MAAMC,OAAOC,KAAKJ,EAAQE,OAAO,IACnCD,MACbI,EAAeL,EAAQrR,KAAK0Q,EAAY3I,OAI5C,OAAO2J,EAAe,KAHLC,YACbD,EAAeJ,EAAS,KAAK3B,QAAQ,IAEC,MAE5CzU,MAAO,SAAUwV,EAAa1Q,GAC5B,OAAOA,EAAKqO,OAAOqC,EAAY,GAAG3I,UAIxC6J,OAAQ,CACNxN,SAAS,EACTyN,SAAU,OACVxD,OAAQ,CACNyD,SAAU,MAKVlC,EACJ,qBAAK9U,MAAO,CAAE+U,UAAW,UAAzB,SACE,qCACmB,gBAAZ1B,EAA4B,SAAW,gBAD9C,mGAGiB,IACF,gBAAZA,EAA4B,gBAAkB,uBAJjD,SASJ,OACE,sBAAKzT,UAAU,YAAf,UACE,cAAC,KAAD,CAASQ,MAAO0U,EAAhB,SACE,cAACmC,GAAA,EAAD,MAEF,6BAAK5D,IACL,cAAC,YAAD,CAAUnO,KAAMoO,EAAY/Q,QAASa,Q,8BC+F5B8T,GAxJY,SAAC,GAA4C,IAA1C7D,EAAyC,EAAzCA,QAAS8D,EAAgC,EAAhCA,0BAAgC,EAC7C1X,mBAAS,WADoC,mBAC9D4M,EAD8D,KACxD+K,EADwD,KAGjEC,EAAYF,EAA0BG,mBAAmB1H,WACzD2H,EACFJ,EAA0BK,6BAA6B5H,WACrD6H,EAASN,EAA0BO,gBAAgB9H,WACnD+H,EACFR,EAA0BS,0BAA0BhI,WAEtD,OAAQvD,GACN,IAAK,UACHgL,EAAYF,EAA0BG,mBAAmB1H,WACzD2H,EACEJ,EAA0BK,6BAA6B5H,WACzD6H,EAASN,EAA0BO,gBAAgB9H,WACnD+H,EACER,EAA0BS,0BAA0BhI,WACtD,MAEF,IAAK,YACHyH,EAAYF,EAA0BU,sBAAsBjI,WAC5D2H,EACEJ,EAA0BW,gCAAgClI,WAC5D6H,EAASN,EAA0BY,mBAAmBnI,WACtD+H,EACER,EAA0Ba,6BAA6BpI,WACzD,MAEF,IAAK,gBACHyH,EACEF,EAA0Bc,2BAA2BrI,WACvD2H,EACEJ,EAA0Be,qCACvBtI,WACL6H,EAASN,EAA0BgB,wBAAwBvI,WAC3D+H,EACER,EAA0BiB,kCAAkCxI,WAC9D,MAEF,IAAK,WACHyH,EAAYF,EAA0BkB,qBAAqBzI,WAC3D2H,EACEJ,EAA0BmB,+BAA+B1I,WAC3D6H,EAASN,EAA0BoB,kBAAkB3I,WACrD+H,EACER,EAA0BqB,4BAA4B5I,WAO5D,IAAM0D,EAAa,CACjBC,OAAQ,CAAC,SAAU,OACnBE,SAAU,CACR,CACEhE,MAAO,YACPlC,gBAAiB,uBACjBqG,YAAa,qBACbC,YAAa,EACb3O,KAAM,CAACmS,EAAYE,EAAoBE,EAASE,IAElD,CACElI,MAAO,gBACPlC,gBAAiB,sBACjBqG,YAAa,oBACbC,YAAa,EACb3O,KAAM,CAACqS,EAAoBI,MAK3BpV,EAAU,CACdmT,SAAU,CACRC,UAAW,CACTlG,MAAO,SAAUmG,EAAa1Q,GAC5B,IAAIqR,EAAUrR,EAAKuO,SAASmC,EAAYC,cAGpCW,EAAQ,CAFMtR,EAAKuO,SAAS,GAAGvO,KAAK,GAAKA,EAAKuO,SAAS,GAAGvO,KAAK,GACpDA,EAAKuO,SAAS,GAAGvO,KAAK,GAAKA,EAAKuO,SAAS,GAAGvO,KAAK,IAE5D0R,EAAeL,EAAQrR,KAAK0Q,EAAY3I,OAI5C,OAAO2J,EAAe,KAHLC,YACbD,EAAeJ,EAAMZ,EAAY3I,OAAU,KAAK4H,QAAQ,IAElB,MAE5CzU,MAAO,SAAUwV,EAAa1Q,GAC5B,OAAOA,EAAKqO,OAAOqC,EAAY,GAAG3I,UAIxCgI,OAAQ,CACNI,MAAO,CACL,CACEC,MAAO,CACLmD,aAAa,GAEftD,WAAY,CACV7L,SAAS,EACT8L,YAAa,4BAOjBN,EACJ,sBAAK9U,MAAO,CAAE+U,UAAW,UAAzB,UACE,iJAIA,oCACK,wDADL,+CAIA,oCACK,4DADL,kDAOIhS,EAAWC,IAAXD,OAER,OACE,sBAAKnD,UAAU,YAAf,UACE,cAAC,KAAD,CAASQ,MAAO0U,EAAhB,SACE,cAAC4D,GAAA,EAAD,MAEF,6BAAKrF,IACL,eAAC,IAAD,CACErT,MAAO,CAAEa,MAAO,KAChBR,KAAK,QACL6C,aAAc,UACdlB,SAAU,SAACC,GAETmV,EAAQnV,IANZ,UASE,cAACc,EAAD,CAAQhB,MAAM,UAAd,qBACA,cAACgB,EAAD,CAAQhB,MAAM,YAAd,wBACA,cAACgB,EAAD,CAAQhB,MAAM,gBAAd,2BACA,cAACgB,EAAD,CAAQhB,MAAM,WAAd,0BAEF,uBACA,cAAC,iBAAD,CAAemD,KAAMoO,EAAY/Q,QAASA,QCyJjCoW,GA1SQ,SAAC,GAcjB,IAbLC,EAaI,EAbJA,oBACAC,EAYI,EAZJA,qBACAC,EAWI,EAXJA,iBACAC,EAUI,EAVJA,kBACAC,EASI,EATJA,uBACAC,EAQI,EARJA,oBACAC,EAOI,EAPJA,eACAC,EAMI,EANJA,YAKAhC,EACI,EADJA,0BAUMiC,EACJ,sBAAKpZ,MAAO,CAAE+U,UAAW,UAAzB,UACE,kPAKA,cAAC,KAAD,CACEhT,MAAO,4DAKPsX,EACJ,sBAAKrZ,MAAO,CAAE+U,UAAW,UAAzB,UACE,mNAKA,cAAC,KAAD,CACEhT,MAAO,qEAKb,OACE,qCACE,sBAAKnC,UAAU,kBAAf,UACE,cAAC,KAAD,UAKE,cAAC,KAAD,CAAKyL,KAAM,GAAX,SACG8L,GACC,cAAC,GAAD,CACE9D,QAAS,0BACT8D,0BAA2BA,QAKnC,eAAC,KAAD,WACE,cAAC,KAAD,CAAK9L,KAAM,GAAX,SACG6N,GACC,cAAC,GAAD,CACE9F,mBAAoB8F,EACpBzJ,MAAM,kBACN4D,QAAQ,mBAId,eAAC,KAAD,CAAKhI,KAAM,GAAX,UACE,eAAC,KAAD,WACE,cAAC,KAAD,CAAKA,KAAM,GAAX,SACGuN,GAAuBC,EACtB,cAAC,GAAD,CACExF,QAAQ,cACR0C,OAAO,cACPK,MAAOwC,EACP5C,OAAO,eACPK,MAAOwC,IAGT,cAAC,IAAD,CACES,MAAOC,IAAMC,uBACblN,YAAa,sCAInB,cAAC,KAAD,CAAKjB,KAAM,GAAX,SACGyN,GAAoBC,EACnB,cAAC,GAAD,CACE1F,QAAQ,qBACR0C,OAAO,WACPK,MAAO0C,EACP9C,OAAO,YACPK,MAAO0C,IAGT,cAAC,IAAD,CACEO,MAAOC,IAAMC,uBACblN,YAAa,gDAKrB,eAAC,KAAD,WACE,cAAC,KAAD,CAAKjB,KAAM,GAAX,SACG2N,EACC,sBAAKpZ,UAAU,sBAAf,UACE,cAAC,KAAD,CAASQ,MAAOiZ,EAAhB,SACE,cAACI,GAAA,EAAD,MAEF,6DACA,6BAAKT,OAGP,cAAC,IAAD,CACEM,MAAOC,IAAMC,uBACblN,YACE,sDAKR,cAAC,KAAD,CAAKjB,KAAM,GAAX,SACG4N,EACC,sBAAKrZ,UAAU,mBAAf,UACE,cAAC,KAAD,CAASQ,MAAOgZ,EAAhB,SACE,cAACM,GAAA,EAAD,MAEF,yDACA,6BAAKT,OAGP,cAAC,IAAD,CACEK,MAAOC,IAAMC,uBACblN,YAAa,2DAOzB,eAAC,KAAD,WACE,cAAC,KAAD,CAAKjB,KAAM,GAAX,SACG6N,GACC,cAAC,GAAD,CACE9F,mBAAoB8F,EACpBnD,OAAO,aACPC,OAAO,eACP3C,QAAQ,uBAId,cAAC,KAAD,CAAKhI,KAAM,GAAX,SACG8N,GACC,cAAC,GAAD,CACE/F,mBAAoB+F,EACpBpD,OAAO,UACPC,OAAO,YACP3C,QAAQ,oCAOlB,sBAAKzT,UAAU,yBAAf,UACE,cAAC,KAAD,UACE,cAAC,KAAD,CAAKyL,KAAM,GAAX,SACG8L,GACC,cAAC,GAAD,CACE9D,QAAS,0BACT8D,0BAA2BA,QAKnC,cAAC,KAAD,UACE,cAAC,KAAD,CAAK9L,KAAM,GAAX,SACG6N,GACC,cAAC,GAAD,CACE9F,mBAAoB8F,EACpBzJ,MAAM,kBACN4D,QAAQ,qBAKhB,cAAC,KAAD,UACE,eAAC,KAAD,CAAKhI,KAAM,GAAX,UACE,eAAC,KAAD,WACE,cAAC,KAAD,CAAKA,KAAM,GAAX,SACGuN,GAAuBC,EACtB,cAAC,GAAD,CACExF,QAAQ,cACR0C,OAAO,cACPK,MAAOwC,EACP5C,OAAO,eACPK,MAAOwC,IAGT,cAAC,IAAD,CACES,MAAOC,IAAMC,uBACblN,YAAa,sCAInB,cAAC,KAAD,CAAKjB,KAAM,GAAX,SACGyN,GAAoBC,EACnB,cAAC,GAAD,CACE1F,QAAQ,qBACR0C,OAAO,WACPK,MAAO0C,EACP9C,OAAO,YACPK,MAAO0C,IAGT,cAAC,IAAD,CACEO,MAAOC,IAAMC,uBACblN,YAAa,gDAKrB,eAAC,KAAD,WACE,cAAC,KAAD,CAAKjB,KAAM,GAAX,SACG2N,EACC,sBAAKpZ,UAAU,sBAAf,UACE,cAAC,KAAD,CAASQ,MAAOiZ,EAAhB,SACE,cAACI,GAAA,EAAD,MAEF,6DACA,6BAAKT,OAGP,cAAC,IAAD,CACEM,MAAOC,IAAMC,uBACblN,YACE,sDAKR,cAAC,KAAD,CAAKjB,KAAM,GAAX,SACG4N,EACC,sBAAKrZ,UAAU,mBAAf,UACE,cAAC,KAAD,CAASQ,MAAOgZ,EAAhB,SACE,cAACM,GAAA,EAAD,MAEF,yDACA,6BAAKT,OAGP,cAAC,IAAD,CACEK,MAAOC,IAAMC,uBACblN,YAAa,0DAOzB,cAAC,KAAD,UACE,cAAC,KAAD,CAAKjB,KAAM,GAAX,SACG6N,GACC,cAAC,GAAD,CACE9F,mBAAoB8F,EACpBnD,OAAO,aACPC,OAAO,eACP3C,QAAQ,yBAKhB,cAAC,KAAD,UACE,cAAC,KAAD,CAAKhI,KAAM,GAAX,SACG8N,GACC,cAAC,GAAD,CACE/F,mBAAoB+F,EACpBpD,OAAO,UACPC,OAAO,YACP3C,QAAQ,uC,oFCjRxB,IAAM/C,GAAa,SAACqJ,EAAoBC,GAArB,sBACRD,EADQ,oCACsCC,EADtC,MAGbrJ,GAAe,SAACoJ,EAAoBC,GAArB,sBACVD,EADU,qCACqCC,EADrC,MAGfpJ,GAAgB,SAACmJ,EAAoBC,GAArB,sBACXD,EADW,uCACsCC,EADtC,MAGhBnJ,GAAkB,SAACkJ,EAAoBC,GAArB,sBACbD,EADa,wCACqCC,EADrC,MA8BlBxJ,GAAiB,SAACuJ,GAKtB,IAJA,IAAIE,EAAa,GAEbC,EA9BS,WAMb,IALA,IAGMC,EAAc,GAEXrK,EAAQsK,GAAgBtK,GAAS,EAAGA,IAAS,CACpD,IAAIuK,EAAazW,MACdC,SAASiM,EAAO,UAChBhM,QAAQ,SACRc,OAAO,cACPyJ,WAECiM,EAAW1W,MACZC,SAASiM,EAAO,UAChB/L,MAAM,SACNa,OAAO,cACPyJ,WAEC2L,EAAU,UAAMK,EAAN,aAAqBC,GAEnCH,EAAYI,KAAKP,GAGnB,OAAOG,EAMMK,GAEJC,EAAI,EAAGA,EAAIP,EAAOjY,OAAQwY,IACjCR,GAAU,sBAERrW,IAAOsW,EAAOO,GAAGC,UAAU,EAAG,IAAK,cAAc9V,OACjD,YAHQ,uCAIsBgM,GAC9BmJ,EACAG,EAAOO,IANC,0DAWVR,GAAU,sBAERrW,IAAOsW,EAAOO,GAAI,cAAc7V,OAChC,YAHQ,yCAIwBiM,GAChCkJ,EACAG,EAAOO,IANC,0DAWVR,GAAU,sBAERrW,IAAOsW,EAAOO,GAAI,cAAc7V,OAChC,YAHQ,oCAImB8L,GAC3BqJ,EACAG,EAAOO,IANC,0DAWVR,GAAU,sBAERrW,IAAOsW,EAAOO,GAAI,cAAc7V,OAChC,YAHQ,sCAIqB+L,GAC7BoJ,EACAG,EAAOO,IANC,0DAYZ,OAAOR,G,yGCnCT,IAAMU,GAAmB,SACvBZ,EACAa,GAFuB,IAGvBZ,EAHuB,mEAGLpW,MAASgB,OAAO,eAHX,sBAKdmV,EALc,YAKQa,EALR,4BAKwCZ,EALxC,MAOnBa,GAAS,SACbd,GADa,IAEbC,EAFa,mEAEKpW,MAASgB,OAAO,eAFrB,sBAGDmV,EAHC,4BAGqCC,EAHrC,MAKTc,GAAsB,SAC1Bf,EACAa,GAF0B,IAG1BZ,EAH0B,mEAGRpW,MAASgB,OAAO,eAHR,sBAKjBmV,EALiB,YAKKa,EALL,+BAKwCZ,EALxC,MAOtBe,GAAY,SAChBhB,GADgB,IAEhBC,EAFgB,mEAEEpW,MAASgB,OAAO,eAFlB,sBAGJmV,EAHI,+BAGqCC,EAHrC,MAKZgB,GAAU,WACd,IAAIC,EAAU,GAKd,OAJArN,GAAM7K,SAAQ,SAAC2M,GACbuL,GAAO,iBAAcvL,EAAd,QAGFuL,EAAQC,QAGXC,GAAa,SAACrL,GAClB,IAAIsL,EAAQxX,MAASgB,OAAO,cACxByW,EAAWzX,MAASC,SAASiM,EAAO,UAAUlL,OAAO,cAEzD,MAAM,GAAN,OAAUyW,EAAV,aAAuBD,IA4InBE,GAA0B,SAACvB,GAC/B,IAAI5I,EAAK,iDA1IY,SAAC4I,GAsItB,MArIc,+DACqCY,GACzCZ,EACAiB,MAHI,wHAS2BH,GAAOd,GATlC,qIAcwCe,GAC5Cf,EACAiB,MAhBI,2HAsB8BD,GAAUhB,GAtBxC,qIA4BsCY,GAC5CZ,EACAiB,KACAG,GAAW,IA/BL,mHAqC4BN,GAClCd,EACAoB,GAAW,IAvCL,gIA6CyCL,GAC/Cf,EACAiB,KACAG,GAAW,IAhDL,sHAsD+BJ,GACrChB,EACAoB,GAAW,IAxDL,oIA+D2CR,GACjDZ,EACAiB,KACAG,GAAW,IAlEL,wHAwEiCN,GACvCd,EACAoB,GAAW,IA1EL,qIAgF8CL,GACpDf,EACAiB,KACAG,GAAW,IAnFL,2HAyFoCJ,GAC1ChB,EACAoB,GAAW,IA3FL,8HAkGqCR,GAC3CZ,EACAiB,KACAG,GAAW,KArGL,kHA2G2BN,GACjCd,EACAoB,GAAW,KA7GL,+HAmHwCL,GAC9Cf,EACAiB,KACAG,GAAW,KAtHL,qHA4H8BJ,GACpChB,EACAoB,GAAW,KA9HL,oEA2IE3K,CAAeuJ,GAFtB,mCAST,OAAO1Y,cAAP,KACI8P,IClJSoK,GA3Ga,SAAC,GAA2B,IAAzBvS,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WAAiB,EASjDC,mBAAS4J,GAA2B,CACtC3J,UAAW,CAAEjE,eAAgB+D,EAAYG,UAAWJ,KAL3CwS,EAL0C,EAKnDjS,QAGMkS,GAR6C,EAOnDjS,MAPmD,EAQnDlE,MAKF,GAAImW,IAAuBD,EACzB,IAAIxC,EAAsByC,EAAmBxL,YAAY5F,OAAOlF,WAC5D8T,EACFwC,EAAmBvL,cAAc7F,OAAOlF,WACtC+T,EAAmBuC,EAAmBtL,QAAQ/E,aAAajG,WAC3DgU,EACFsC,EAAmBrL,UAAUhF,aAAajG,WAnBO,MA8BjD+D,mBAAS6J,GAAuB,CAClC5J,UAAW,CAAEjE,eAAgB+D,EAAYG,UAAWJ,KAL3C0S,EA1B0C,EA0BnDnS,QAGMoS,GA7B6C,EA4BnDnS,MA5BmD,EA6BnDlE,MAKF,GAAIqW,IAAoBD,EACtB,IAMItC,EANwBpG,GAC1B2I,EAAgBC,UAAUvR,OAAOwR,OAM/BxC,EAJqBrG,GACvB2I,EAAgBG,OAAO1Q,aAAayQ,OAvCa,MAqDjD3S,mBFkDyB,SAAC6Q,GAC9B,IAAI5I,EAAK,6CAEKX,GAAeuJ,GAFpB,6BAST,OAAO1Y,cAAP,KACI8P,GE7DS4K,CAAuB,GAAD,OAAI/S,EAAJ,YAAaC,KAJrC+S,EAjD0C,EAiDnDzS,QAGM0S,GApD6C,EAmDnDzS,MAnDmD,EAoDnDlE,MAGF,GAAI2W,IAAoBD,EACtB,IAAIE,EClE4B,SAAC5W,GAGnC,IAAMyR,EAAOD,OAAOC,KAAKzR,GAEnB+E,EAAS8R,KAAEC,QAAQrF,GAAM,SAACsF,GAAD,OAASA,EAAInK,SAAS,aAE/CoK,EAAgBH,KAAEC,QAAQ/R,EAAOkS,MAAM,SAACF,GAC5C,IAAMG,EAAIH,EAAII,MAAM,KAGpB,MAFO,UAAMD,EAAE,GAAR,YAAcA,EAAE,OAKnBE,EAAaP,KAAEC,QAAQ/R,EAAOsS,OAAO,SAACN,GAC1C,IAAMG,EAAIH,EAAII,MAAM,KAGpB,MAFO,UAAMD,EAAE,GAAR,YAAcA,EAAE,OAqCzB,MAAO,CAAEI,gBA7Be9F,OAAOC,KAAKuF,GAAe/Y,KAAI,SAACsZ,GACtD,IAAMC,EAAIR,EAAcO,GAElBL,EAAIM,EAAE,GACNC,EAAID,EAAE,GAEZ,MAAO,CACLlJ,MAAOiJ,EACP7H,KAAM1P,EAAKkX,GAAGxM,WACd+E,OAAQzP,EAAKyX,GAAG/M,eAoBMgN,aAhBLlG,OAAOC,KAAK2F,GAAYnZ,KAAI,SAAC0Z,GAChD,IAAMH,EAAIJ,EAAWO,GAEfT,EAAIM,EAAE,GACNC,EAAID,EAAE,GAEZ,MAAO,CACLlJ,MAAOqJ,EACPjI,KAAM1P,EAAKkX,GAAGxM,WACdqG,OAAQ/Q,EAAKyX,GAAG/M,gBDoBHkN,CAAqBjB,GAxDe,MAqEjD/S,mBAASoS,GAAwB,GAAD,OAAItS,EAAJ,YAAaC,KAJtCkU,EAjE0C,EAiEnD5T,QAGMgO,GApE6C,EAmEnD/N,MAnEmD,EAoEnDlE,MAGF,OACE,sBAAKtF,UAAU,uBAAf,UACE,cAAC,KAAD,CACEA,UAAU,cACVQ,MAAM,YACNkN,SAAUzE,MAGTwS,IAAuBE,IAAoBM,IAC5C,cAAC,IAAD,IAGDR,IACED,GACDG,IACCD,GACDO,IACCD,GACDzE,IACC4F,GACC,cAAC,GAAD,CACEnE,oBAAqBA,EACrBC,qBAAsBA,EACtBC,iBAAkBA,EAClBC,kBAAmBA,EACnBC,uBAAwBA,EACxBC,oBAAqBA,EACrBC,eAAgB4C,EAASU,gBACzBrD,YAAa2C,EAASc,aACtBzF,0BAA2BA,QE3CxB6F,GA9DG,WAAM,MAE8Bvd,mBAClDoN,KAAKC,MAAMC,aAAaC,QAAQ,yBAA2BT,GAAa,IAHpD,mBAEfoN,EAFe,KAEKsD,EAFL,KAKhBvQ,EAAqB,SAACiN,GAC1BsD,EAAsBtD,IAIxB5M,aAAaK,QACX,sBACAP,KAAKQ,UAAUsM,IAZK,MAeQla,oBAAS,GAfjB,mBAefC,EAfe,KAeNC,EAfM,KAqBhBgB,EAAU,WACdhB,GAAW,IAGb,OACE,sBAAKC,UAAU,YAAf,UACE,cAAC,IAAD,CAAMA,UAAU,YAAhB,SACE,cAAC,GAAD,CAAgB8M,mBAAoBA,MAEtC,sBAAK9M,UAAU,iBAAf,UACE,cAAC,IAAD,CACEU,KAAM,cAAC8R,GAAA,EAAD,IACN/R,KAAK,QACLG,QAjBW,WACjBb,GAAW,MAkBP,cAAC,IAAD,CACEc,UAAU,OACVC,UAAU,EACVC,QAASA,EACTjB,QAASA,EACT2S,cAAc,EACdC,YAAa,CAAE/E,gBAAiB,WANlC,SAQE,qBAAK3N,UAAU,mBAAf,SACE,cAAC,GAAD,CACE8M,mBAAoBA,EACpB4E,YAAa3Q,WAKrB,qBAAKf,UAAU,iBAAf,SACE,cAAC,GAAD,CACEgJ,MAAO+Q,EAAmB/Q,MAC1BC,WAAY8Q,EAAmBnN,a,UC1C1B0Q,GAjBE,WACf,IAAMC,EAAUC,cAEhB,OACE,cAAC,KAAD,CACEC,OAAO,MACPjd,MAAM,MACNkN,SAAS,8CACTgQ,MACE,cAAC,IAAD,CAAQra,KAAK,UAAUzC,QAAS,kBAAM2c,EAAQhD,KAAK,MAAnD,0B,UCIArS,GAA4ByV,KAA5BzV,OAAQ0V,GAAoBD,KAApBC,QAASzV,GAAWwV,KAAXxV,OAkCV0V,OAhCf,WACE,OACE,cAAC,IAAD,CAAQC,SAAUC,4BAAlB,SACE,eAAC,KAAD,CAAQ/d,UAAU,cAAlB,UACE,cAACkI,GAAD,UACE,cAAC,EAAD,MAEF,cAAC0V,GAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAUI,OAAK,EAACC,KAAK,IAAIC,GAAG,iBAC5B,cAAC,IAAD,CAAOF,OAAK,EAACG,KAAM,CAAC,IAAK,gBAAzB,SACE,cAAC,GAAD,MAEF,cAAC,IAAD,CAAOH,OAAK,EAACG,KAAK,cAAlB,SACE,cAAC,GAAD,MAEF,cAAC,IAAD,CAAOH,OAAK,EAACG,KAAK,aAAlB,SACE,cAAC,GAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACE,cAAC,GAAD,WAIN,cAAChW,GAAD,UACE,cAAC,EAAD,Y,UC7BJiW,GAAW,IAAIC,WAAS,CAE5BC,IAAI,GAAD,OAAKP,4JAAYQ,0BACpBpX,QAAS,CACPqX,cAAc,UAAD,OAAYT,4JAAYU,2BAInCC,GAAYC,cAAQ,YAAsC,IAAnCC,EAAkC,EAAlCA,cAAeC,EAAmB,EAAnBA,aACtCD,GACFA,EAAc7b,SAAQ,gBAAGwJ,EAAH,EAAGA,QAASuS,EAAZ,EAAYA,UAAWX,EAAvB,EAAuBA,KAAvB,OACpB/M,QAAQC,IAAR,oCAC+B9E,EAD/B,uBACqDuS,EADrD,mBACyEX,OAIzEU,GACFzN,QAAQC,IAAR,2BAAgCwN,IAGlCtS,IAAQ/C,MAAM,2BAGVuV,GAAS,IAAIC,eAAa,CAC9BC,KAAMP,GAAUQ,OAAOd,IACvBe,MAAO,IAAIC,kBAGbC,IAASxd,OACP,cAAC,iBAAD,CAAgBkd,OAAQA,GAAxB,SACE,cAAC,GAAD,MAEFO,SAASC,eAAe,W","file":"static/js/main.1e479bb8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/image.37bc8bd4.png\";","import logo from \"../../assets/image.png\";\nimport { Anchor, Drawer, Button } from \"antd\";\nimport { MenuOutlined } from \"@ant-design/icons\";\nimport { useState } from \"react\";\n\nconst { Link } = Anchor;\n\nconst Navbar = () => {\n  const [visible, setVisible] = useState(false);\n\n  const showDrawer = () => {\n    setVisible(true);\n  };\n\n  const onClose = () => {\n    setVisible(false);\n  };\n\n  return (\n    <div className=\"navbar\">\n      <div className=\"header\">\n        <div className=\"logo\">\n          <img src={logo} alt=\"Logo\"></img>\n          <h2 style={{ fontWeight: \"bold\" }}> Devtools Project Metrics</h2>\n        </div>\n        <div className=\"mobile-hidden\">\n          <Anchor targetOffset=\"50\">\n            <Link href=\"/collections\" title=\"Projects\" />\n            <Link href=\"/developers\" title=\"Developers\" />\n            <Link href=\"/analytics\" title=\"Analytics\" />\n          </Anchor>\n        </div>\n        <div className=\"mobile-visible\">\n          <Button\n            size=\"small\"\n            icon={<MenuOutlined />}\n            onClick={showDrawer}\n          ></Button>\n          <Drawer\n            placement=\"right\"\n            title=\"Navigate\"\n            closable={false}\n            onClose={onClose}\n            visible={visible}\n          >\n            <Anchor targetOffset=\"50\">\n              <Link href=\"/collections\" title=\"Collections\" />\n              <Link href=\"/developers\" title=\"Developers\" />\n              <Link href=\"/analytics\" title=\"Analytics\" />\n            </Anchor>\n          </Drawer>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import { GithubOutlined } from \"@ant-design/icons\";\nimport { BackTop } from \"antd\";\nimport logo from \"../../assets/image.png\";\n\nconst PageFooter = () => {\n  return (\n    <div>\n      <div className=\"logo\">\n        <img src={logo} width=\"50\" height=\"50\" alt=\"Logo\"></img>\n        <p> Content Collection Metrics</p>\n      </div>\n\n      <div className=\"social\">\n        <a href=\"https://github.com/priyamsahoo/ansible-github-metrics\">\n          <GithubOutlined />\n        </a>\n      </div>\n      <div className=\"copyright\">Copyright &copy; 2021 </div>\n      <BackTop></BackTop>\n    </div>\n  );\n};\n\nexport default PageFooter;\n","import { gql } from \"@apollo/client\";\n\nconst ISSUES = gql`\n  query Issues($repositoryName: String!, $ownerName: String!, $cursor: String) {\n    repository(name: $repositoryName, owner: $ownerName) {\n      name\n      nameWithOwner\n      issues(\n        first: 100\n        orderBy: { field: CREATED_AT, direction: DESC }\n        after: $cursor\n      ) {\n        totalCount\n        edges {\n          node {\n            author {\n              login\n            }\n            state\n            title\n            number\n            createdAt\n            url\n            updatedAt\n          }\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n      }\n    }\n  }\n`;\n\nconst PR = gql`\n  query PRs($repositoryName: String!, $ownerName: String!, $cursor: String) {\n    repository(name: $repositoryName, owner: $ownerName) {\n      name\n      nameWithOwner\n      pullRequests(\n        first: 100\n        orderBy: { field: CREATED_AT, direction: DESC }\n        after: $cursor\n      ) {\n        totalCount\n        edges {\n          node {\n            author {\n              login\n            }\n            createdAt\n            updatedAt\n            url\n            state\n            title\n            number\n          }\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n      }\n    }\n  }\n`;\n\nconst COLLECTION_INSIGHTS = gql`\n  query($repositoryName: String!, $ownerName: String!) {\n    repository(name: $repositoryName, owner: $ownerName) {\n      openIssues: issues(filterBy: { states: [OPEN] }) {\n        totalCount\n      }\n      closedIssues: issues(filterBy: { states: [CLOSED] }) {\n        totalCount\n      }\n      openPRs: pullRequests(states: OPEN) {\n        totalCount\n      }\n      closedPRs: pullRequests(states: CLOSED) {\n        totalCount\n      }\n      mergedPRs: pullRequests(states: MERGED) {\n        totalCount\n      }\n    }\n  }\n`;\n\nconst RELEASES_AND_TAGS = gql`\n  query($repositoryName: String!, $ownerName: String!) {\n    tags: repository(name: $repositoryName, owner: $ownerName) {\n      refs(refPrefix: \"refs/tags/\", last: 1) {\n        totalCount\n        edges {\n          node {\n            target {\n              ... on Tag {\n                name\n                message\n                tagger {\n                  name\n                  date\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport { ISSUES, PR, COLLECTION_INSIGHTS, RELEASES_AND_TAGS };\n","import React, { useEffect } from \"react\";\nimport * as moment from \"moment\";\nimport { Input, Select, DatePicker } from \"antd\";\n\nexport const Filter = ({ column }) => {\n  return (\n    <div style={{ marginTop: 5 }}>\n      {column.canFilter && column.render(\"Filter\")}\n    </div>\n  );\n};\n\n// Search filter: This is the default filter\nexport const DefaultColumnFilter = ({\n  column: {\n    filterValue,\n    setFilter,\n    preFilteredRows: { length },\n  },\n}) => {\n  return (\n    <Input\n      size=\"small\"\n      value={filterValue || \"\"}\n      onChange={(e) => {\n        setFilter(e.target.value || undefined);\n      }}\n      placeholder={`search (${length})`}\n    />\n  );\n};\n\n// Drop-down filter\nexport const SelectColumnFilter = ({\n  column: { filterValue, setFilter, preFilteredRows, id },\n}) => {\n  const options = React.useMemo(() => {\n    const options = new Set();\n    preFilteredRows.forEach((row) => {\n      options.add(row.values[id]);\n    });\n    return [...options.values()];\n  }, [id, preFilteredRows]);\n\n  const { Option } = Select;\n\n  return (\n    <>\n      <Select\n        size=\"small\"\n        style={{ width: 100 }}\n        id=\"custom-select\"\n        type=\"select\"\n        defaultValue={\"OPEN\"}\n        // value={filterValue}\n        onChange={(e) => {\n          setFilter(e || undefined);\n        }}\n      >\n        <Option value=\"\">All</Option>Option\n        {options.map((option) => (\n          <Option key={option} value={option}>\n            {option}\n          </Option>\n        ))}\n      </Select>\n    </>\n  );\n};\n\n// Date range filter\nexport const DateFilter = (props) => {\n  const {\n    column: { setFilter, preFilteredRows },\n  } = props;\n\n  const defValue = [\n    moment().subtract(13, \"days\").startOf(\"day\"),\n    moment().endOf(\"day\"),\n  ];\n\n  const dateRanges = {\n    Today: [moment(), moment()],\n    \"This Month\": [moment().startOf(\"month\"), moment().endOf(\"month\")],\n    \"Past Week\": [\n      moment().subtract(6, \"days\").startOf(\"day\"),\n      moment().endOf(\"day\"),\n    ],\n    \"Past Month\": [\n      moment().subtract(29, \"days\").startOf(\"day\"),\n      moment().endOf(\"day\"),\n    ],\n    \"Past 3 months\": [\n      moment().subtract(3, \"months\").startOf(\"day\"),\n      moment().endOf(\"day\"),\n    ],\n    \"Past 6 months\": [\n      moment().subtract(6, \"months\").startOf(\"day\"),\n      moment().endOf(\"day\"),\n    ],\n  };\n\n  useEffect(() => {\n    setFilter(filterByDate(defValue));\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const filterByDate = (value) => {\n    if (!value) {\n      value = defValue;\n    }\n    const [startDate, endDate] = value;\n\n    return preFilteredRows.filter((row) => {\n      return (\n        moment(row.values[\"node.createdAt\"]).isAfter(startDate._d) &&\n        moment(row.values[\"node.createdAt\"]).isBefore(endDate._d)\n      );\n    });\n  };\n  const { RangePicker } = DatePicker;\n  return (\n    <RangePicker\n      size=\"small\"\n      format=\"ll\"\n      ranges={dateRanges}\n      defaultValue={defValue}\n      defaultPickerValue={defValue}\n      onChange={(value) => setFilter(filterByDate(value))}\n    />\n  );\n};\n","import { useTable, useFilters, useSortBy, usePagination } from \"react-table\";\nimport { Filter, DefaultColumnFilter } from \"../../utils/filters\";\nimport { Empty, Input, Select, Statistic } from \"antd\";\nimport { Button } from \"antd\";\nimport { BackwardOutlined, ForwardOutlined } from \"@ant-design/icons\";\n\nconst DataTable = ({\n  title,\n  tag,\n  repositoryName,\n  tableData,\n  totalCount,\n  tableColumns,\n}) => {\n  const columns = tableColumns;\n  const data = tableData;\n\n  const tableInstance = useTable(\n    {\n      columns,\n      data,\n      defaultColumn: { Filter: DefaultColumnFilter },\n    },\n    useFilters,\n    useSortBy,\n    usePagination\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    page,\n    nextPage,\n    previousPage,\n    canNextPage,\n    canPreviousPage,\n    pageOptions,\n    gotoPage,\n    pageCount,\n    setPageSize,\n    state,\n    prepareRow,\n  } = tableInstance;\n\n  const { pageIndex, pageSize } = state;\n\n  const { Option } = Select;\n\n  return (\n    <>\n      <Statistic\n        valueStyle={{ color: \"#3d5861\" }}\n        title={tag}\n        value={rows.length}\n        suffix={\" of \" + totalCount}\n      />\n\n      {/* Boilerplate table code */}\n      <table\n        className=\"table-data\"\n        {...getTableProps()}\n        // width={1450}\n        style={{ width: \"100%\" }}\n      >\n        <thead>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                  {column.render(\"Header\")}\n                  <Filter column={column} />\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {rows.length === 0 ? (\n            <td colSpan=\"5\">\n              <Empty />\n            </td>\n          ) : (\n            <>\n              {page.map((row) => {\n                prepareRow(row);\n                return (\n                  <tr {...row.getRowProps()}>\n                    {row.cells.map((cell) => {\n                      return (\n                        <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n                      );\n                    })}\n                  </tr>\n                );\n              })}\n            </>\n          )}\n        </tbody>\n      </table>\n      <div>\n        <span>\n          Page{\" \"}\n          <strong>\n            {pageIndex + 1} of {pageOptions.length}\n          </strong>{\" \"}\n        </span>\n        <span>\n          | Go to page:{\" \"}\n          <Input\n            min=\"1\"\n            size=\"small\"\n            type=\"number\"\n            defaultValue={pageIndex + 1}\n            onChange={(e) => {\n              const pageNumber = e.target.value\n                ? Number(e.target.value) - 1\n                : 0;\n              gotoPage(pageNumber);\n            }}\n            style={{ width: \"50px\" }}\n          ></Input>{\" \"}\n        </span>\n        <Select\n          size=\"small\"\n          value={pageSize}\n          onChange={(e) => setPageSize(Number(e))}\n        >\n          {[10, 25, 50].map((pageSize) => (\n            <Option key={pageSize} value={pageSize}>\n              Show {pageSize}\n            </Option>\n          ))}\n        </Select>\n        {\" | \"}\n        <Button\n          size=\"small\"\n          onClick={() => gotoPage(0)}\n          disabled={!canPreviousPage}\n        >\n          <BackwardOutlined />\n        </Button>{\" \"}\n        <Button\n          size=\"small\"\n          onClick={() => previousPage()}\n          disabled={!canPreviousPage}\n        >\n          Previous\n        </Button>{\" \"}\n        <Button size=\"small\" onClick={() => nextPage()} disabled={!canNextPage}>\n          Next\n        </Button>{\" \"}\n        <Button\n          size=\"small\"\n          onClick={() => gotoPage(pageCount - 1)}\n          disabled={!canNextPage}\n        >\n          <ForwardOutlined />\n        </Button>\n      </div>\n    </>\n  );\n};\n\nexport default DataTable;\n","import { DateFilter, SelectColumnFilter } from \"../../utils/filters\";\nimport moment from \"moment\";\n\nexport const ISSUE_COLUMNS = [\n  {\n    Header: \"Created At\",\n    Footer: \"Created At\",\n    accessor: \"node.createdAt\",\n    Cell: ({ value }) => {\n      return moment(new Date(value)).format(\"ll\");\n    },\n    disableSortBy: true,\n    Filter: DateFilter,\n    filter: (rows, columnId, filterValues) => {\n      return filterValues;\n    },\n    width: 100,\n  },\n  // {\n  //     id: 'node.closed',\n  //     Header: 'Status',\n  //     Footer: 'Status',\n  //     accessor: d => { return d.node.closed ? \"Closed\" : \"Open\" },\n  //     Filter: SelectColumnFilter,\n  //     filter: 'equals'\n  // },\n  {\n    Header: \"Status\",\n    Footer: \"Status\",\n    accessor: \"node.state\",\n    Filter: SelectColumnFilter,\n    filter: \"equals\",\n    disableSortBy: true,\n    width: 100,\n  },\n  {\n    Header: \"Title\",\n\n    Footer: \"Title\",\n    accessor: \"node.title\",\n    Cell: ({ cell: { value }, row: { original } }) => (\n      <a href={original.node.url} target=\"_blank\" rel=\"noopener noreferrer\">\n        {value}\n      </a>\n    ),\n    disableSortBy: true,\n    width: 250,\n  },\n  {\n    Header: \"Number\",\n    Footer: \"Number\",\n    accessor: \"node.number\",\n    Filter: SelectColumnFilter,\n    disableFilters: true,\n    disableSortBy: true,\n    width: 100,\n  },\n  // {\n  //   Header: \"Updated At\",\n  //   Footer: \"Updated At\",\n  //   accessor: \"node.updatedAt\",\n  //   Cell: ({ value }) => {\n  //     return moment(new Date(value)).format(\"ll\");\n  //   },\n  //   disableFilters: true,\n  //   width: 100,\n  // },\n  {\n    Header: \"Author\",\n    Footer: \"Author\",\n    accessor: \"node.author.login\",\n    disableFilters: true,\n    width: 100,\n  },\n];\n","import { useQuery } from \"@apollo/client\";\nimport { Button, Card, Skeleton } from \"antd\";\nimport { ISSUES } from \"../../queries/collections_queries\";\nimport DataTable from \"./DataTable\";\nimport { ISSUE_COLUMNS } from \"./IssueColumns\";\nimport moment from \"moment\";\nimport { CalendarFilled, CheckCircleFilled } from \"@ant-design/icons\";\nimport { DesktopDownloadIcon } from \"@primer/octicons-react\";\n\nconst ACIssues = ({ owner, repository }) => {\n  // Query for obtaining issues\n  const { loading, error, data, fetchMore } = useQuery(ISSUES, {\n    variables: { repositoryName: repository, ownerName: owner, cursor: null },\n    fetchPolicy: \"network-only\",\n  });\n\n  const handleClick = () => {\n    const { hasNextPage, endCursor } = data.repository.issues.pageInfo;\n    // console.log(endCursor);\n\n    if (hasNextPage) {\n      fetchMore({\n        variables: { cursor: endCursor },\n        updateQuery: (previousResult, { fetchMoreResult }) => {\n          fetchMoreResult.repository.issues.edges = [\n            ...data.repository.issues.edges,\n            ...fetchMoreResult.repository.issues.edges,\n          ];\n\n          return fetchMoreResult;\n        },\n      });\n    }\n  };\n\n  return (\n    <div className=\"ac-issues\">\n      {error && <div>{error}</div>}\n      {loading && (\n        <div>\n          <Skeleton />\n        </div>\n      )}\n      {data && !loading && (\n        <>\n          <h2>Issues Table</h2>\n\n          <div\n            style={{\n              display: \"flex\",\n              direction: \"row\",\n              justifyContent: \"center\",\n              flexWrap: \"wrap\",\n            }}\n          >\n            <Card\n              hoverable\n              style={{\n                width: 200,\n                height: 70,\n                // flexGrow: 4,\n                marginLeft: 5,\n                marginRight: 5,\n              }}\n            >\n              <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n                <CalendarFilled\n                  style={{\n                    fontSize: 42,\n                    flexGrow: 1,\n                    color: \"#3d5861\",\n                  }}\n                />\n                <div style={{ flexGrow: 1 }}>\n                  From{\" \"}\n                  <b>\n                    {moment(\n                      new Date(\n                        data.repository.issues.edges[\n                          data.repository.issues.edges.length - 1\n                        ].node.createdAt\n                      )\n                    ).format(\"ll\")}{\" \"}\n                  </b>\n                  to{\" \"}\n                  <b>\n                    {moment(\n                      new Date(data.repository.issues.edges[0].node.createdAt)\n                    ).format(\"ll\")}\n                  </b>\n                </div>\n              </div>\n            </Card>\n\n            {data.repository.issues.totalCount ===\n            data.repository.issues.edges.length ? (\n              <Card\n                hoverable\n                style={{\n                  width: 200,\n                  height: 70,\n                  // flexGrow: 4,\n                  marginLeft: 5,\n                  marginRight: 5,\n                }}\n              >\n                <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n                  <CheckCircleFilled\n                    style={{ fontSize: 42, flexGrow: 1, color: \"#3d5861\" }}\n                  />\n                  <div style={{ flexGrow: 1 }}>\n                    Fetched all data:\n                    <br />\n                    {data.repository.issues.totalCount} issues\n                  </div>\n                </div>\n              </Card>\n            ) : null}\n\n            {data.repository.issues.pageInfo.hasNextPage ? (\n              <Card\n                className=\"fetch-more-card\"\n                style={{\n                  width: 200,\n                  height: 70,\n                  // flexGrow: 4,\n                  marginLeft: 5,\n                  marginRight: 5,\n                }}\n              >\n                <div\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    alignItems: \"baseline\",\n                  }}\n                >\n                  {/* <Tooltip title=\"Fetch more data\" placement=\"bottom\"> */}\n                  <Button\n                    style={{ width: 44, height: 44 }}\n                    shape=\"circle\"\n                    // disabled={!data.repository.issues.pageInfo.hasNextPage}\n                    onClick={handleClick}\n                  >\n                    <DesktopDownloadIcon />\n                  </Button>\n                  <div style={{ flexGrow: 1 }}>Fetch More Data</div>\n                </div>\n                {/* </Tooltip> */}\n              </Card>\n            ) : null}\n          </div>\n\n          <DataTable\n            tag=\"Issues\"\n            repositoryName={data.repository.nameWithOwner}\n            tableData={data.repository.issues.edges}\n            totalCount={data.repository.issues.totalCount}\n            tableColumns={ISSUE_COLUMNS}\n          />\n        </>\n      )}\n    </div>\n  );\n};\nexport default ACIssues;\n","import { DateFilter, SelectColumnFilter } from \"../../utils/filters\";\nimport moment from \"moment\";\n\nexport const PR_COLUMNS = [\n  {\n    Header: \"Created At\",\n    Footer: \"Created At\",\n    accessor: \"node.createdAt\",\n    Cell: ({ value }) => {\n      return moment(new Date(value)).format(\"ll\");\n    },\n    disableSortBy: true,\n    Filter: DateFilter,\n    filter: (rows, columnId, filterValues) => {\n      return filterValues;\n    },\n    width: 100,\n  },\n  // {\n  //     id: 'node.closed',\n  //     Header: 'Status',\n  //     Footer: 'Status',\n  //     accessor: d => { return d.node.closed ? \"Closed\" : \"Open\" },\n  //     Filter: SelectColumnFilter,\n  //     filter: 'equals'\n  // },\n  {\n    Header: \"Status\",\n    Footer: \"Status\",\n    accessor: \"node.state\",\n    Filter: SelectColumnFilter,\n    filter: \"equals\",\n    disableSortBy: true,\n    width: 100,\n  },\n  {\n    Header: \"Title\",\n    Footer: \"Title\",\n    accessor: \"node.title\",\n    Cell: ({ cell: { value }, row: { original } }) => (\n      <a href={original.node.url} target=\"_blank\" rel=\"noopener noreferrer\">\n        {value}\n      </a>\n    ),\n    disableSortBy: true,\n    width: 250,\n  },\n  {\n    Header: \"Number\",\n    Footer: \"Number\",\n    accessor: \"node.number\",\n    Filter: SelectColumnFilter,\n    disableFilters: true,\n    disableSortBy: true,\n    width: 100,\n  },\n  // {\n  //   Header: \"Updated At\",\n  //   Footer: \"Updated At\",\n  //   accessor: \"node.updatedAt\",\n  //   Cell: ({ value }) => {\n  //     return moment(new Date(value)).format(\"ll\");\n  //   },\n  //   disableFilters: true,\n  //   width: 100,\n  // },\n  {\n    Header: \"Author\",\n    Footer: \"Author\",\n    accessor: \"node.author.login\",\n    disableFilters: true,\n    width: 100,\n  },\n];\n","import { useQuery } from \"@apollo/client\";\nimport moment from \"moment\";\nimport { Button, Card, Skeleton } from \"antd\";\nimport { PR } from \"../../queries/collections_queries\";\nimport DataTable from \"./DataTable\";\nimport { PR_COLUMNS } from \"./PRColumns\";\nimport { CalendarFilled, CheckCircleFilled } from \"@ant-design/icons\";\nimport { DesktopDownloadIcon } from \"@primer/octicons-react\";\n\nconst ACPullRequests = ({ owner, repository }) => {\n  // Query for obtaining pull requests\n  const { loading, error, data, fetchMore } = useQuery(PR, {\n    variables: { repositoryName: repository, ownerName: owner, cursor: null },\n    fetchPolicy: \"network-only\",\n  });\n  // console.log(data);\n\n  const handleClick = () => {\n    const { hasNextPage, endCursor } = data.repository.pullRequests.pageInfo;\n    // console.log(endCursor);\n\n    if (hasNextPage) {\n      fetchMore({\n        variables: { cursor: endCursor },\n        updateQuery: (previousResult, { fetchMoreResult }) => {\n          fetchMoreResult.repository.pullRequests.edges = [\n            ...data.repository.pullRequests.edges,\n            ...fetchMoreResult.repository.pullRequests.edges,\n          ];\n\n          return fetchMoreResult;\n        },\n      });\n    }\n  };\n\n  return (\n    <div className=\"ac-pull-requests\">\n      {error && <div>{error}</div>}\n      {loading && (\n        <div>\n          <Skeleton />\n        </div>\n      )}\n      {data && !loading && (\n        <>\n          <h2>Pull Requests Table</h2>\n\n          <div\n            style={{\n              display: \"flex\",\n              direction: \"row\",\n              justifyContent: \"center\",\n              flexWrap: \"wrap\",\n            }}\n          >\n            <Card\n              hoverable\n              style={{\n                width: 200,\n                height: 70,\n                // flexGrow: 4,\n                marginLeft: 5,\n                marginRight: 5,\n              }}\n            >\n              <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n                <CalendarFilled\n                  style={{ fontSize: 42, flexGrow: 1, color: \"#3d5861\" }}\n                />\n                <div style={{ flexGrow: 1 }}>\n                  From{\" \"}\n                  <b>\n                    {moment(\n                      new Date(\n                        data.repository.pullRequests.edges[\n                          data.repository.pullRequests.edges.length - 1\n                        ].node.createdAt\n                      )\n                    ).format(\"ll\")}{\" \"}\n                  </b>\n                  to{\" \"}\n                  <b>\n                    {moment(\n                      new Date(\n                        data.repository.pullRequests.edges[0].node.createdAt\n                      )\n                    ).format(\"ll\")}\n                  </b>\n                </div>\n              </div>\n            </Card>\n\n            {data.repository.pullRequests.totalCount ===\n            data.repository.pullRequests.edges.length ? (\n              <Card\n                hoverable\n                style={{\n                  width: 200,\n                  height: 70,\n                  // flexGrow: 4,\n                  marginLeft: 5,\n                  marginRight: 5,\n                }}\n              >\n                <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n                  <CheckCircleFilled\n                    style={{ fontSize: 42, flexGrow: 1, color: \"#3d5861\" }}\n                  />\n                  <div style={{ flexGrow: 1 }}>\n                    Fetched all data:\n                    <br />\n                    {data.repository.pullRequests.totalCount} pullRequests\n                  </div>\n                </div>\n              </Card>\n            ) : null}\n\n            {data.repository.pullRequests.pageInfo.hasNextPage ? (\n              <Card\n                className=\"fetch-more-card\"\n                style={{\n                  width: 200,\n                  height: 70,\n                  // flexGrow: 4,\n                  marginLeft: 5,\n                  marginRight: 5,\n                }}\n              >\n                <div\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    alignItems: \"baseline\",\n                  }}\n                >\n                  {/* <Tooltip title=\"Fetch more data\" placement=\"bottom\"> */}\n                  <Button\n                    style={{ width: 44, height: 44 }}\n                    shape=\"circle\"\n                    // disabled={!data.repository.pullRequests.pageInfo.hasNextPage}\n                    onClick={handleClick}\n                  >\n                    <DesktopDownloadIcon />\n                  </Button>\n                  <div style={{ flexGrow: 1 }}>Fetch More Data</div>\n                </div>\n                {/* </Tooltip> */}\n              </Card>\n            ) : null}\n          </div>\n          <DataTable\n            title=\"Pull Requests Table\"\n            tag=\"Pull requests\"\n            repositoryName={data.repository.nameWithOwner}\n            tableData={data.repository.pullRequests.edges}\n            totalCount={data.repository.pullRequests.totalCount}\n            tableColumns={PR_COLUMNS}\n          />\n        </>\n      )}\n    </div>\n  );\n};\nexport default ACPullRequests;\n","import { useQuery } from \"@apollo/client\";\nimport { COLLECTION_INSIGHTS } from \"../../queries/collections_queries\";\nimport { Row, Col, Statistic, Card, Divider, Tooltip, Skeleton } from \"antd\";\nimport { ArrowUpOutlined } from \"@ant-design/icons\";\nimport {\n  IssueOpenedIcon,\n  IssueClosedIcon,\n  GitPullRequestIcon,\n  GitMergeIcon,\n} from \"@primer/octicons-react\";\n\nconst CollectionInsights = ({ owner, repository }) => {\n  // Query for obtaining collection insight info\n  const { loading, error, data } = useQuery(COLLECTION_INSIGHTS, {\n    variables: { repositoryName: repository, ownerName: owner },\n  });\n\n  // console.log(data);\n\n  const displayDetails = () => {\n    return (\n      <div className=\"information\">\n        <Divider orientation=\"center\" plain>\n          Issues\n        </Divider>\n\n        <Row gutter={16}>\n          <Col span={12}>\n            <Statistic\n              title={\n                <Tooltip title=\"Open Issues\">\n                  <span style={{ color: \"#3c6d0e\" }}>\n                    <IssueOpenedIcon />\n                  </span>\n                </Tooltip>\n              }\n              value={data.repository.openIssues.totalCount}\n            />\n          </Col>\n          <Col span={12}>\n            <Statistic\n              title={\n                <Tooltip title=\"Closed Issues\">\n                  <span style={{ color: \"#bf0000\" }}>\n                    <IssueClosedIcon />\n                  </span>\n                </Tooltip>\n              }\n              value={data.repository.closedIssues.totalCount}\n            />\n          </Col>\n        </Row>\n\n        <Divider orientation=\"center\" plain>\n          Pull Requests\n        </Divider>\n\n        <Row gutter={16}>\n          <Col span={8}>\n            <Statistic\n              title={\n                <Tooltip title=\"Open PRs\">\n                  <span style={{ color: \"#3c6d0e\" }}>\n                    <GitPullRequestIcon />\n                  </span>\n                </Tooltip>\n              }\n              value={data.repository.openPRs.totalCount}\n            />\n          </Col>\n          <Col span={8}>\n            <Statistic\n              title={\n                <Tooltip title=\"Closed PRs\">\n                  <span style={{ color: \"#bf0000\" }}>\n                    <GitPullRequestIcon />\n                  </span>\n                </Tooltip>\n              }\n              value={data.repository.closedPRs.totalCount}\n            />\n          </Col>\n          <Col span={8}>\n            <Statistic\n              title={\n                <Tooltip title=\"Merged PRs\">\n                  <span style={{ color: \"\t#6b4f78\" }}>\n                    <GitMergeIcon />\n                  </span>\n                </Tooltip>\n              }\n              value={data.repository.mergedPRs.totalCount}\n            />\n          </Col>\n        </Row>\n\n        <Divider orientation=\"center\" plain>\n          Percentage\n        </Divider>\n\n        <div className=\"site-statistic-demo-card\">\n          <Row gutter={6}>\n            <Col span={12}>\n              <Card>\n                <Statistic\n                  title=\"Closed Issues\"\n                  value={\n                    (data.repository.closedIssues.totalCount /\n                      (data.repository.openIssues.totalCount +\n                        data.repository.closedIssues.totalCount)) *\n                      100 || 0\n                  }\n                  precision={2}\n                  valueStyle={{ color: \"#3f8600\" }}\n                  prefix={<ArrowUpOutlined />}\n                  suffix=\"%\"\n                />\n              </Card>\n            </Col>\n            <Col span={12}>\n              <Card>\n                <Statistic\n                  title=\"Merged PRs\"\n                  value={\n                    (data.repository.mergedPRs.totalCount /\n                      (data.repository.openPRs.totalCount +\n                        data.repository.mergedPRs.totalCount)) *\n                    100\n                  }\n                  precision={2}\n                  valueStyle={{ color: \"#3f8600\" }}\n                  prefix={<ArrowUpOutlined />}\n                  suffix=\"%\"\n                />\n              </Card>\n            </Col>\n          </Row>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <Card className=\"collection-insights\">\n      <h2>Collection Insights</h2>\n      {error && <div>{error}</div>}\n      {loading && <Skeleton />}\n      {data && !loading && displayDetails()}\n    </Card>\n  );\n};\n\nexport default CollectionInsights;\n","import { useQuery } from \"@apollo/client\";\nimport { RELEASES_AND_TAGS } from \"../../queries/collections_queries\";\nimport moment from \"moment\";\n// import { Card } from \"reactstrap\";\nimport { Card, Empty, Skeleton } from \"antd\";\nimport { TagsOutlined } from \"@ant-design/icons\";\n\nconst ReleasesAndTags = ({ owner, repository }) => {\n  // Query for obtaining release-tags info\n  const { loading, error, data } = useQuery(RELEASES_AND_TAGS, {\n    variables: { repositoryName: repository, ownerName: owner },\n  });\n\n  // console.log(\"RELEASE DATA\", data);\n\n  return (\n    <Card className=\"releases-and-tags\">\n      <h2>Release Tags</h2>\n      {error && <p>{error}</p>}\n      {loading && <Skeleton />}\n      {data && !loading && (\n        <div className=\"information\">\n          <div className=\"tags-info\">\n            <h3>\n              Total <TagsOutlined />: {data.tags.refs.totalCount}\n            </h3>\n            <h3>Latest Tag Information: </h3>\n            {data.tags.refs.edges && data.tags.refs.totalCount ? (\n              <div>\n                <p>Name: {data.tags.refs.edges[0].node.target.name}</p>\n                <p>\n                  Tag message: {data.tags.refs.edges[0].node.target.message}\n                </p>\n                <p>\n                  Published on:{\" \"}\n                  {data.tags.refs.edges[0].node.target.tagger &&\n                    moment(\n                      new Date(data.tags.refs.edges[0].node.target.tagger.date)\n                    ).format(\"ll\")}\n                </p>\n                <p>\n                  Author:{\" \"}\n                  {data.tags.refs.edges[0].node.target.tagger &&\n                    data.tags.refs.edges[0].node.target.tagger.name}\n                </p>\n              </div>\n            ) : (\n              <Empty description={\"No latest release info available\"} />\n            )}\n          </div>\n        </div>\n      )}\n    </Card>\n  );\n};\n\nexport default ReleasesAndTags;\n","export const REPOSITORIES = [\n  { owner: \"ansible\", repo: \"vscode-ansible\" },\n  { owner: \"ansible\", repo: \"ansible-language-server\" },\n  { owner: \"ansible\", repo: \"ansible-navigator\" },\n  { owner: \"ansible-community\", repo: \"ansible-lint\" },\n  { owner: \"ansible-community\", repo: \"molecule\" },\n  { owner: \"ansible-community\", repo: \"molecule-podman\" },\n  { owner: \"ansible-community\", repo: \"ansible-compat\" },\n];\n","import { Select, Card } from \"antd\";\nimport { REPOSITORIES } from \"../../data/repositories\";\n\nconst RepositoryDropdown = ({ repositoryCallback }) => {\n  const repositories = REPOSITORIES;\n  // console.log(repositories);\n\n  const { Option } = Select;\n\n  return (\n    <Card className=\"repository-dropdown\">\n      <label>Repositories: </label>\n      <Select\n        onChange={(e) => repositoryCallback(e[1], e[0])}\n        showSearch\n        defaultValue={\n          JSON.parse(localStorage.getItem(\"collectionsRepository\")).repo ||\n          repositories[0].repo\n        }\n        style={{ width: \"100%\" }}\n      >\n        {repositories.map((repository, index) => (\n          <Option key={index} value={[repository.repo, repository.owner]}>\n            {repository.repo}\n          </Option>\n        ))}\n      </Select>\n    </Card>\n  );\n};\n\nexport default RepositoryDropdown;\n","import { useState } from \"react\";\nimport ACIssues from \"./ACIssues\";\nimport ACPullRequests from \"./ACPullRequests\";\nimport CollectionInsights from \"./CollectionInsights\";\nimport ReleasesAndTags from \"./ReleasesAndTags\";\nimport RepositoryDropdown from \"./RepositoryDropdown\";\nimport { REPOSITORIES } from \"../../data/repositories\";\nimport { Divider, PageHeader } from \"antd\";\n\nconst Collections = () => {\n  // Default repository is the first repository object in REPOSITORIES list\n  const [repository, setRepository] = useState(\n    JSON.parse(localStorage.getItem(\"collectionsRepository\")) || REPOSITORIES[0]\n  );\n\n  const repositoryCallback = (owner, repo) => {\n    setRepository({ owner: owner, repo: repo });\n  };\n\n  localStorage.setItem(\"collectionsRepository\", JSON.stringify(repository));\n\n  return (\n    <div className=\"collections\">\n      <div className=\"collection-contents\">\n        <div className=\"insights-and-release-info\">\n          <div>\n            <RepositoryDropdown repositoryCallback={repositoryCallback} />\n          </div>\n          <div>\n            <CollectionInsights\n              owner={repository.owner}\n              repository={repository.repo}\n            />\n          </div>\n          <div>\n            <ReleasesAndTags\n              owner={repository.owner}\n              repository={repository.repo}\n            />\n          </div>\n        </div>\n        <div className=\"tables\">\n          <PageHeader\n            className=\"page-header\"\n            title=\"Tables\"\n            subTitle={repository.repo}\n          />\n          <div>\n            <ACIssues owner={repository.owner} repository={repository.repo} />\n          </div>\n          <Divider plain style={{ backgroundColor: \"#6f909d\" }}></Divider>\n          <div>\n            <ACPullRequests\n              owner={repository.owner}\n              repository={repository.repo}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Collections;\n","export const USERS = [\n  \"jimi-c\",\n  \"relrod\",\n  \"ssbarnea\",\n  \"webknjaz\",\n  \"ganeshrn\",\n  \"cidrblock\",\n  \"priyamsahoo\",\n];\n","import { gql } from \"@apollo/client\";\n\nconst DEVELOPER_LIST = gql`\n  {\n    organization(login: \"ansible-collections\") {\n      membersWithRole(last: 100) {\n        nodes {\n          login\n          name\n        }\n      }\n    }\n  }\n`;\n\nconst DEVELOPER_DETAILS = gql`\n  query($userName: String!) {\n    user(login: $userName) {\n      name\n      login\n      email\n      avatarUrl\n      url\n    }\n  }\n`;\n\nconst DEVELOPER_CONTRIBUTIONS = gql`\n  query(\n    $queryStringIssueOpen: String!\n    $queryStringIssueClosed: String!\n    $queryStringPROpen: String!\n    $queryStringPRMerged: String!\n    $queryStringTotal: String!\n  ) {\n    OPEN_ISSUES: search(query: $queryStringIssueOpen, type: ISSUE) {\n      issueCount\n    }\n    CLOSED_ISSUES: search(query: $queryStringIssueClosed, type: ISSUE) {\n      issueCount\n    }\n    OPEN_PR: search(query: $queryStringPROpen, type: ISSUE) {\n      issueCount\n    }\n    MERGED_PR: search(query: $queryStringPRMerged, type: ISSUE) {\n      issueCount\n    }\n    TOTAL_CONTRIBUTION: search(query: $queryStringTotal, type: ISSUE) {\n      issueCount\n    }\n  }\n`;\n\nexport { DEVELOPER_LIST, DEVELOPER_DETAILS, DEVELOPER_CONTRIBUTIONS };\n","import { useQuery } from \"@apollo/client\";\nimport {\n  DEVELOPER_DETAILS,\n  DEVELOPER_CONTRIBUTIONS,\n} from \"../../queries/developer_queries\";\nimport * as moment from \"moment\";\nimport { useState } from \"react\";\nimport { Card, Select, Skeleton } from \"antd\";\nimport { REPOSITORIES } from \"../../data/repositories\";\n\nconst OverallInfo = ({ selectedDeveloper }) => {\n  let repositoryList = REPOSITORIES.map(\n    (repository) => `${repository.owner}/${repository.repo}`\n  );\n\n  // constructing a query string to handle all repositories\n  // eg., repo: repo1 repo2 repo3...\n  repositoryList = repositoryList.map((item) => \"repo:\" + item);\n  const repoQueryString = repositoryList.join(\" \");\n  // console.log(repoQueryString);\n\n  // value returned from the period dropdown\n  const [dateQueryString, setDateQueryString] = useState(\n    moment().subtract(1, \"month\").format(\"YYYY-MM-DD\").toString() +\n      \"..\" +\n      moment().format(\"YYYY-MM-DD\").toString()\n  );\n\n  // constructing final query string for developer's overall contributions in all the repositories mentioned in the list\n  const issueOpenQueryString = `${repoQueryString} type:issue author:${selectedDeveloper} updated:${dateQueryString}`;\n  const issueClosedQueryString = `${repoQueryString} type:issue is:closed author:${selectedDeveloper} updated:${dateQueryString}`;\n  const prOpenQueryString = `${repoQueryString} type:pr author:${selectedDeveloper} updated:${dateQueryString}`;\n  const prMergedQueryString = `${repoQueryString} type:pr is:merged author:${selectedDeveloper} updated:${dateQueryString}`;\n  const totalContributionQueryString = `${repoQueryString} author:${selectedDeveloper} updated:${dateQueryString}`;\n\n  // Query for obtaining selected developer's overall contributions in all the repositories mentioned in the list\n  const {\n    loading: contributionLoading,\n    error: contributionError,\n    data: contributionData,\n  } = useQuery(DEVELOPER_CONTRIBUTIONS, {\n    variables: {\n      queryStringIssueOpen: issueOpenQueryString,\n      queryStringIssueClosed: issueClosedQueryString,\n      queryStringPROpen: prOpenQueryString,\n      queryStringPRMerged: prMergedQueryString,\n      queryStringTotal: totalContributionQueryString,\n    },\n  });\n\n  // console.log(contributionData);\n\n  // Query for obtaining selected developer's information\n  const {\n    loading: infoLoading,\n    error: infoError,\n    data: infoData,\n  } = useQuery(DEVELOPER_DETAILS, {\n    variables: { userName: selectedDeveloper },\n  });\n\n  // console.log(dateQueryString);\n\n  const { Option, OptGroup } = Select;\n\n  const displayDetails = () => {\n    return (\n      <div>\n        {/* Developer's profile info */}\n        <div className=\"profile-info\">\n          <img src={infoData.user.avatarUrl} alt=\"Developer Avatar\"></img>\n          <h1>\n            <a\n              href={infoData.user.url}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              {infoData.user.name}\n            </a>\n          </h1>\n          <p>{infoData.user.login}</p>\n\n          {/* Period dropdown */}\n          <Card className=\"period-dropdown\">\n            <label>Period: </label>\n            <Select\n              style={{ width: 180 }}\n              defaultValue={dateQueryString}\n              onChange={(e) => {\n                // console.log(e);\n                setDateQueryString(e);\n              }}\n            >\n              <Option value={`<=${moment().format(\"YYYY-MM-DD\").toString()}`}>\n                Overall\n              </Option>\n              <Option\n                value={\n                  moment().subtract(7, \"days\").format(\"YYYY-MM-DD\").toString() +\n                  \"..\" +\n                  moment().format(\"YYYY-MM-DD\").toString()\n                }\n              >\n                Last week\n              </Option>\n              <Option\n                value={\n                  moment()\n                    .subtract(1, \"month\")\n                    .format(\"YYYY-MM-DD\")\n                    .toString() +\n                  \"..\" +\n                  moment().format(\"YYYY-MM-DD\").toString()\n                }\n              >\n                Last month\n              </Option>\n              <Option\n                value={\n                  moment().subtract(1, \"year\").format(\"YYYY-MM-DD\").toString() +\n                  \"..\" +\n                  moment().format(\"YYYY-MM-DD\").toString()\n                }\n              >\n                Last year\n              </Option>\n              <OptGroup label=\"Current year\">\n                <Option\n                  value={\n                    moment()\n                      .month(\"Jan\")\n                      .startOf(\"month\")\n                      .format(\"YYYY-MM-DD\")\n                      .toString() +\n                    \"..\" +\n                    moment()\n                      .month(\"Mar\")\n                      .endOf(\"month\")\n                      .format(\"YYYY-MM-DD\")\n                      .toString()\n                  }\n                >\n                  {`${moment().month(\"Jan\").format(\"MMM 'YY\")} - ${moment()\n                    .month(\"Mar\")\n                    .format(\"MMM 'YY\")}`}\n                </Option>\n                <Option\n                  value={\n                    moment()\n                      .month(\"Apr\")\n                      .startOf(\"month\")\n                      .format(\"YYYY-MM-DD\")\n                      .toString() +\n                    \"..\" +\n                    moment()\n                      .month(\"Jun\")\n                      .endOf(\"month\")\n                      .format(\"YYYY-MM-DD\")\n                      .toString()\n                  }\n                >\n                  {`${moment().month(\"Apr\").format(\"MMM 'YY\")} - ${moment()\n                    .month(\"Jun\")\n                    .format(\"MMM 'YY\")}`}\n                </Option>\n                <Option\n                  value={\n                    moment()\n                      .month(\"Jul\")\n                      .startOf(\"month\")\n                      .format(\"YYYY-MM-DD\")\n                      .toString() +\n                    \"..\" +\n                    moment()\n                      .month(\"Sep\")\n                      .endOf(\"month\")\n                      .format(\"YYYY-MM-DD\")\n                      .toString()\n                  }\n                >\n                  {`${moment().month(\"Jul\").format(\"MMM 'YY\")} - ${moment()\n                    .month(\"Sep\")\n                    .format(\"MMM 'YY\")}`}\n                </Option>\n                <Option\n                  value={\n                    moment()\n                      .month(\"Oct\")\n                      .startOf(\"month\")\n                      .format(\"YYYY-MM-DD\")\n                      .toString() +\n                    \"..\" +\n                    moment()\n                      .month(\"Dec\")\n                      .endOf(\"month\")\n                      .format(\"YYYY-MM-DD\")\n                      .toString()\n                  }\n                >\n                  {`${moment().month(\"Oct\").format(\"MMM 'YY\")} - ${moment()\n                    .month(\"Dec\")\n                    .format(\"MMM 'YY\")}`}\n                </Option>\n              </OptGroup>\n            </Select>\n          </Card>\n        </div>\n\n        {/* Overall information of a selected developer's contributions */}\n        {contributionLoading && <Skeleton />}\n        {contributionError && <p>{contributionError}</p>}\n        {contributionData && !contributionLoading && (\n          <div className=\"collection-contributions\">\n            <Card\n              className=\"total-contributions\"\n              title=\"Total contribution\"\n              size=\"small\"\n            >\n              <h1>{contributionData.TOTAL_CONTRIBUTION.issueCount}</h1>\n            </Card>\n            <Card\n              className=\"contribution-splits\"\n              title=\"Issues opened\"\n              size=\"small\"\n            >\n              <h1>{contributionData.OPEN_ISSUES.issueCount}</h1>\n            </Card>\n            <Card\n              className=\"contribution-splits\"\n              title=\"Issues closed\"\n              size=\"small\"\n            >\n              <h1>{contributionData.CLOSED_ISSUES.issueCount}</h1>\n            </Card>\n            <Card\n              className=\"contribution-splits\"\n              title=\"PRs Opened\"\n              size=\"small\"\n            >\n              <h1>{contributionData.OPEN_PR.issueCount}</h1>\n            </Card>\n            <Card\n              className=\"contribution-splits\"\n              title=\"PRs merged\"\n              size=\"small\"\n            >\n              <h1>{contributionData.MERGED_PR.issueCount}</h1>\n            </Card>\n          </div>\n        )}\n        <div className=\"contributionInfo\"></div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"overall-info\">\n      {infoLoading && <Skeleton />}\n      {infoError && <p>{infoError}</p>}\n      {infoData && !infoLoading && displayDetails()}\n    </div>\n  );\n};\n\nexport default OverallInfo;\n","import { gql } from \"@apollo/client\";\nimport { REPOSITORIES } from \"../data/repositories\";\n\n/*\nQuery structure that is built dynamically:\n\nquery {\n    REPOSITORY_OPEN_ISSUE: search(type: ISSUE, query: \"repo:{__org__/__repo__} author:{__selectedDeveloper__} type:issue\", last: 100) {\n      issueCount\n    }\n    REPOSITORY_CLOSED_ISSUE: search(type: ISSUE, query: \"repo:{__org__/__repo__} author:{__selectedDeveloper__} type:issue is:closed\", last: 100) {\n      issueCount\n    }\n    REPOSITORY_OPEN_PR: search(type: ISSUE, query: \"repo:{__org__/__repo__} author:{__selectedDeveloper__} type:pr\", last: 100) {\n      issueCount\n    }\n    REPOSITORY_CLOSED_PR: search(type: ISSUE, query: \"repo:{__org__/__repo__} author:{__selectedDeveloper__} type:pr is:merged\", last: 100) {\n      issueCount\n    }\n}\n*/\n\nconst removeSpecialCharacters = (str) => str.replace(/[^a-zA-Z0-9 ]/g, \"\");\n\nconst open_pr_qs = (repo, owner, selectedDeveloper) =>\n  `\"repo:${owner}/${repo} type:pr author:${selectedDeveloper}\"`;\n\nconst merged_pr_qs = (repo, owner, selectedDeveloper) =>\n  `\"repo:${owner}/${repo} type:pr is:merged author:${selectedDeveloper}\"`;\n\nconst open_issue_qs = (repo, owner, selectedDeveloper) =>\n  `\"repo:${owner}/${repo} type:issue author:${selectedDeveloper}\"`;\n\nconst closed_issue_qs = (repo, owner, selectedDeveloper) =>\n  `\"repo:${owner}/${repo} type:issue is:closed author:${selectedDeveloper}\"`;\n\nconst queryGenerator = (name, owner, selectedDeveloper) => {\n  return `\n   ${removeSpecialCharacters(\n     name\n   ).toUpperCase()}_OPEN_PR: search(query: ${open_pr_qs(\n    name,\n    owner,\n    selectedDeveloper\n  )}, type: ISSUE, last: 100) {\n                issueCount\n            }\n\n   ${removeSpecialCharacters(\n     name\n   ).toUpperCase()}_MERGED_PR: search(query: ${merged_pr_qs(\n    name,\n    owner,\n    selectedDeveloper\n  )}, type: ISSUE) {\n                issueCount\n            }\n\n   ${removeSpecialCharacters(\n     name\n   ).toUpperCase()}_OPEN_ISSUE: search(query: ${open_issue_qs(\n    name,\n    owner,\n    selectedDeveloper\n  )}, type: ISSUE, last: 100) {\n                issueCount\n            }\n\n   ${removeSpecialCharacters(\n     name\n   ).toUpperCase()}_CLOSED_ISSUE: search(query: ${closed_issue_qs(\n    name,\n    owner,\n    selectedDeveloper\n  )}, type: ISSUE, last: 100) {\n                issueCount\n            }\n\n\n            `;\n};\n\nconst innerQuery = (selectedDeveloper) => {\n  let innerQuery = ``;\n  for (let repository of REPOSITORIES) {\n    innerQuery += queryGenerator(\n      repository.repo,\n      repository.owner,\n      selectedDeveloper\n    );\n  }\n\n  return innerQuery;\n};\n\nconst DEVELOPER_REPO_WISE_ISSUE_PR = (selectedDeveloper) => {\n  let query = `\n        query {\n            ${innerQuery(selectedDeveloper)}\n        }\n\n    `;\n\n  console.log(\"Community Contribution\", innerQuery(selectedDeveloper));\n\n  return gql`\n    ${query}\n  `;\n};\n\nexport { DEVELOPER_REPO_WISE_ISSUE_PR };\n","import { REPOSITORIES } from \"../../data/repositories\";\n\n// remove special characters from the repository name\nconst removeSpecialCharacters = (str) => str.replace(/[^a-zA-Z0-9 ]/g, \"\");\n\nconst RepositoryWiseDetails = ({ data }) => {\n  const openIssue = \"_OPEN_ISSUE\";\n  const closedIssue = \"_CLOSED_ISSUE\";\n  const openPR = \"_OPEN_PR\";\n  const mergedPR = \"_MERGED_PR\";\n  return (\n    <div className=\"repository-wise-details\">\n      <div className=\"repository-wise-details-inner\">\n        {REPOSITORIES.map(({ repo }, index) => {\n          const name = removeSpecialCharacters(repo).toUpperCase();\n          const openIssues = data[name + openIssue].issueCount;\n          const closedIssues = data[name + closedIssue].issueCount;\n          const openPRS = data[name + mergedPR].issueCount;\n          const mergedPRS = data[name + openPR].issueCount;\n\n          const totalContributions =\n            openIssues + closedIssues + openPRS + mergedPRS;\n\n          return totalContributions ? (\n            <div key={index} className=\"repository-wise-issue-pr-data\">\n              <h2>{repo}</h2>\n              <p>Issues opened: {openIssues}</p>\n              <p>Issues closed: {closedIssues}</p>\n              <p>Open PRs: {openPRS}</p>\n              <p>Merged PRs: {mergedPRS}</p>\n            </div>\n          ) : null;\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default RepositoryWiseDetails;\n","import { useQuery } from \"@apollo/client\";\nimport { Skeleton } from \"antd\";\nimport { DEVELOPER_REPO_WISE_ISSUE_PR } from \"../../queries/developer_repo_wise_issue_pr_query\";\nimport RepositoryWiseDetails from \"./RepositoryWiseDetails\";\n\nconst SpiltUpInfo = ({ selectedDeveloper }) => {\n  // Query for obtaining selected developer's repository-wise info\n  const { loading, error, data } = useQuery(\n    DEVELOPER_REPO_WISE_ISSUE_PR(selectedDeveloper)\n  );\n\n  return (\n    <div className=\"splitup-info\">\n      <h2>Overall repository wise contributions of {selectedDeveloper}</h2>\n      {loading && <Skeleton />}\n      {error && <p>{error}</p>}\n      {data && <RepositoryWiseDetails data={data} />}\n    </div>\n  );\n};\n\nexport default SpiltUpInfo;\n","import { Divider, PageHeader } from \"antd\";\nimport OverallInfo from \"./OverallInfo\";\nimport SpiltUpInfo from \"./SplitUpInfo\";\n\nconst DeveloperDetails = ({ selectedDeveloper }) => {\n  // console.log(data);\n\n  return (\n    <div className=\"developer-details\">\n      <PageHeader\n        className=\"page-header\"\n        title=\"Developer\"\n        subTitle={selectedDeveloper}\n      />\n\n      <OverallInfo selectedDeveloper={selectedDeveloper} />\n      <Divider plain style={{ backgroundColor: \"#6f909d\" }} />\n      <SpiltUpInfo selectedDeveloper={selectedDeveloper} />\n    </div>\n  );\n};\n\nexport default DeveloperDetails;\n","import { useState, useEffect } from \"react\";\nimport { Input, List } from \"antd\";\nimport { USERS } from \"../../data/users\";\n\nconst DeveloperList = ({ developerCallback, drawerClose }) => {\n  const [searchName, setSearchName] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n\n  // const users = developers.map((developer) => developer.name);\n  //   console.log(users);\n\n  const users = USERS;\n\n  const handleSearch = (e) => {\n    setSearchName(e);\n  };\n\n  useEffect(() => {\n    const results = users.filter((user) =>\n      user.toLowerCase().includes(searchName.toLowerCase())\n    );\n    setSearchResults(results);\n  }, [searchName, users]);\n\n  return (\n    <div className=\"developer-list\">\n      <h2>Developers:</h2>\n      <Input\n        size=\"small\"\n        allowClear={true}\n        placeholder={`Search (${users.length})`}\n        value={searchName}\n        onChange={(e) => handleSearch(e.target.value)}\n      />\n      <List>\n        {searchResults.map((item, index) => (\n          <p\n            key={index}\n            value={item}\n            onClick={(e) => {\n              developerCallback(item);\n              drawerClose();\n            }}\n          >\n            {item}\n          </p>\n        ))}\n      </List>\n    </div>\n  );\n};\n\nDeveloperList.defaultProps = {\n  drawerClose: () => {},\n};\n\nexport default DeveloperList;\n","import { UnorderedListOutlined } from \"@ant-design/icons\";\nimport { Button, Card, Drawer } from \"antd\";\nimport { useState } from \"react\";\nimport { USERS } from \"../../data/users\";\nimport DeveloperDetails from \"./DeveloperDetails\";\nimport DeveloperList from \"./DevelopersList\";\n\nconst Developers = () => {\n  // Default user is the first user in the USERS list\n  const [selectedDeveloper, setSelectedDeveloper] = useState(\n    localStorage.getItem(\"user\") || USERS[0]\n  );\n  const developerCallback = (selectedDeveloper) => {\n    setSelectedDeveloper(selectedDeveloper);\n  };\n\n  localStorage.setItem(\"user\", selectedDeveloper);\n\n  // console.log(selectedDeveloper);\n\n  const [visible, setVisible] = useState(false);\n\n  const showDrawer = () => {\n    setVisible(true);\n  };\n\n  const onClose = () => {\n    setVisible(false);\n  };\n\n  return (\n    <div className=\"developers\">\n      <div className=\"developers-content\">\n        {/* <div className=\"mobile-hidden\"> */}\n        <Card className=\"dev-list\">\n          <DeveloperList developerCallback={developerCallback} />\n        </Card>\n        {/* </div> */}\n        <div className=\"mobile-visible\">\n          <Button\n            icon={<UnorderedListOutlined />}\n            size=\"small\"\n            onClick={showDrawer}\n          ></Button>\n          <Drawer\n            placement=\"left\"\n            closable={true}\n            onClose={onClose}\n            visible={visible}\n            getContainer={false}\n            drawerStyle={{ backgroundColor: \"#3d5861\" }}\n          >\n            <div className=\"dev-list-mobile\">\n              <DeveloperList\n                developerCallback={developerCallback}\n                drawerClose={onClose}\n              />\n            </div>\n          </Drawer>\n        </div>\n        <div className=\"dev-details\">\n          {!selectedDeveloper && (\n            <p> &lt;-- Click on a developer for more details</p>\n          )}\n          {selectedDeveloper && (\n            <DeveloperDetails selectedDeveloper={selectedDeveloper} />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Developers;\n","import { useState, useEffect } from \"react\";\nimport { Input, List } from \"antd\";\nimport { REPOSITORIES } from \"../../data/repositories\";\n\nconst RepositoryList = ({ repositoryCallback, drawerClose }) => {\n  const [searchRepository, setSearchRepository] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n\n  const repositories = REPOSITORIES;\n  // console.log(repositories);\n\n  const handleSearch = (e) => {\n    // console.log(e);\n    setSearchRepository(e);\n  };\n  // console.log(searchRepository);\n  useEffect(() => {\n    const results = repositories.filter((repository) =>\n      repository[\"repo\"].toLowerCase().includes(searchRepository.toLowerCase())\n    );\n    setSearchResults(results);\n  }, [searchRepository, repositories]);\n\n  return (\n    <div className=\"repository-list\">\n      <h2>Repositories:</h2>\n      <Input\n        size=\"small\"\n        placeholder={`Search (${searchResults.length})`}\n        allowClear={true}\n        value={searchRepository}\n        onChange={(e) => handleSearch(e.target.value)}\n      />\n      <List>\n        {searchResults.map((item, index) => (\n          <p\n            key={index}\n            value={item}\n            onClick={(e) => {\n              repositoryCallback(item);\n              drawerClose();\n            }}\n          >\n            {item.repo}\n          </p>\n        ))}\n      </List>\n    </div>\n  );\n};\n\nRepositoryList.defaultProps = {\n  drawerClose: () => {},\n};\n\nexport default RepositoryList;\n","import { gql } from \"@apollo/client\";\n\nconst ISSUES_AND_PR_TOTAL_COUNT = gql`\n  query totalCountQuery($repositoryName: String!, $ownerName: String!) {\n    OPEN_ISSUES: repository(name: $repositoryName, owner: $ownerName) {\n      issues(states: OPEN) {\n        totalCount\n      }\n    }\n    CLOSED_ISSUES: repository(name: $repositoryName, owner: $ownerName) {\n      issues(states: CLOSED) {\n        totalCount\n      }\n    }\n    OPEN_PR: repository(name: $repositoryName, owner: $ownerName) {\n      pullRequests(states: OPEN) {\n        totalCount\n      }\n    }\n    MERGED_PR: repository(name: $repositoryName, owner: $ownerName) {\n      pullRequests(states: MERGED) {\n        totalCount\n      }\n    }\n  }\n`;\n\nconst ISSUES_AND_PR_AVERAGE = gql`\n  query MyQuery($repositoryName: String!, $ownerName: String!) {\n    ISSUE_AVG: repository(name: $repositoryName, owner: $ownerName) {\n      issues(states: CLOSED, last: 100) {\n        nodes {\n          createdAt\n          closedAt\n        }\n      }\n    }\n    PR_AVG: repository(name: $repositoryName, owner: $ownerName) {\n      pullRequests(states: MERGED, last: 100) {\n        nodes {\n          createdAt\n          mergedAt\n        }\n      }\n    }\n  }\n`;\n\nexport { ISSUES_AND_PR_TOTAL_COUNT, ISSUES_AND_PR_AVERAGE };\n","import moment from \"moment\";\n\nexport const calculateAverageDays = (data) => {\n  let totalDaysDifference = 0;\n  data.forEach((item) => {\n    const startDate = moment(item.createdAt);\n    const endDate = item.closedAt\n      ? moment(item.closedAt)\n      : moment(item.mergedAt);\n    const diff = endDate.diff(startDate, \"days\");\n    totalDaysDifference += diff;\n    // console.log(\"Start Date: \", startDate);\n    // console.log(\"End Date: \", endDate);\n    // console.log(\"Diff: \", diff);\n  });\n\n  //   console.log(\"Length: \", data.length);\n  return Math.floor(totalDaysDifference / data.length);\n};\n","import { Line } from \"react-chartjs-2\";\nimport { LineChartOutlined } from \"@ant-design/icons\";\nimport { Tooltip } from \"antd\";\nimport { Equation } from \"react-equation\";\n\nconst LineGraph = ({ dataGroupedByMonth: data, label, heading }) => {\n  // console.log(\"DATA FROM GRAPH\", data);\n  const dataToPlot = {\n    labels: data.map((item) => item.Month),\n    datasets: [\n      {\n        label: label,\n        fill: true,\n        lineTension: 0.1,\n\n        backgroundColor: \"rgba(77, 161, 169,0.07)\",\n        borderColor: \"rgba(77, 161, 169,1)\",\n        borderWidth: 1,\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: \"rgba(77, 161, 169,1)\",\n        pointBackgroundColor: \"#fff\",\n        pointBorderWidth: 5,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgba(61,88,97,1)\",\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n\n        data: data.map((item) =>\n          ((item.closed / (item.open + item.closed)) * 100 || 0).toFixed(2)\n        ),\n      },\n    ],\n  };\n\n  const option = {\n    scales: {\n      yAxes: [\n        {\n          scaleLabel: {\n            display: true,\n            labelString: \"% of closed issues\",\n          },\n        },\n      ],\n      xAxes: [\n        {\n          ticks: {\n            autoSkip: false,\n            maxRotation: 90,\n            minRotation: 90,\n          },\n        },\n      ],\n    },\n    tooltips: {\n      callbacks: {\n        label: function (tooltipItem, data) {\n          var dataset = data.datasets[tooltipItem.datasetIndex];\n          var currentValue = dataset.data[tooltipItem.index];\n          return currentValue + \"%\";\n        },\n      },\n    },\n  };\n\n  // console.log(\"Plotting data: \", dataToPlot.datasets[0].data);\n\n  const contentForInfo = (\n    <div style={{ textAlign: \"center\" }}>\n      <p>\n        The line chart explains the trend of issues over the last 15 months. It\n        is generated by taking in account the number of issues opened and closed\n        on a per-month basis:\n      </p>\n      <Equation\n        value={\"(issues opened in month X) / (issues closed in month X) * 100%\"}\n      />\n    </div>\n  );\n\n  return (\n    <div className=\"chart-line\">\n      <Tooltip title={contentForInfo}>\n        <LineChartOutlined />\n      </Tooltip>\n\n      <h3>{heading}</h3>\n      <Line data={dataToPlot} options={option} />\n    </div>\n  );\n};\n\nexport default LineGraph;\n","import { BarChartOutlined } from \"@ant-design/icons\";\nimport { Tooltip } from \"antd\";\nimport { Bar } from \"react-chartjs-2\";\n\nconst BarGraph = ({ dataGroupedByMonth: data, label1, label2, heading }) => {\n  // console.log(\"DATA FROM GRAPH\", data);\n  const dataToPlot = {\n    labels: data.map((item) => item.Month),\n    datasets: [\n      {\n        label: label1,\n        fill: true,\n        lineTension: 0.1,\n        backgroundColor: \"rgba(255,166,0,0.4)\",\n        borderColor: \"rgba(255,166,0,1)\",\n        borderWidth: 1,\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: \"rgba(75,192,192,1)\",\n        pointBackgroundColor: \"#fff\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: data.map((item) => {\n          return item.open;\n        }),\n      },\n      {\n        label: label2,\n        fill: true,\n        lineTension: 0.1,\n        backgroundColor: \"rgba(66,153,138,0.4)\",\n        borderColor: \"rgba(66,153,138,1)\",\n        borderWidth: 1,\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: \"rgba(75,192,192,1)\",\n        pointBackgroundColor: \"#fff\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: data.map((item) => {\n          return label2 === \"Closed Issue\" ? item.closed : item.merged;\n        }),\n      },\n    ],\n  };\n\n  const contentForInfo = (\n    <div style={{ textAlign: \"center\" }}>\n      <p>\n        The {heading === \"Issue Categories\" ? \"issues\" : \"pull requests\"} bar\n        graph views the number of{\" \"}\n        {heading === \"Issue Categories\" ? \"issues\" : \"pull requests\"} with\n        'open' or {heading === \"Issue Categories\" ? \"'closed'\" : \"'merged'\"}{\" \"}\n        status in a specific repository over a period of 15 months.\n      </p>\n    </div>\n  );\n\n  return (\n    <div className=\"chart-bar\">\n      <Tooltip title={contentForInfo}>\n        <BarChartOutlined />\n      </Tooltip>\n      <h3>{heading}</h3>\n      <Bar data={dataToPlot} />\n    </div>\n  );\n};\n\nexport default BarGraph;\n","import { PieChartOutlined } from \"@ant-design/icons\";\nimport { Tooltip } from \"antd\";\nimport React from \"react\";\nimport { Doughnut } from \"react-chartjs-2\";\n\nconst DoughnutChart = ({ heading, label1, data1, label2, data2 }) => {\n  // console.log(\"DOUGHNUT DATA\", data1, data2);\n  const dataToPlot = {\n    labels: [label2, label1],\n    datasets: [\n      {\n        data: [data2, data1],\n        backgroundColor: [\"#fbc02d\", \"#9E9E9E\"],\n        hoverBackgroundColor: [\"#f9a825\", \"#757575\"],\n      },\n    ],\n  };\n\n  const option = {\n    tooltips: {\n      callbacks: {\n        label: function (tooltipItem, data) {\n          var dataset = data.datasets[tooltipItem.datasetIndex];\n          var meta = dataset._meta[Object.keys(dataset._meta)[0]];\n          var total = meta.total;\n          var currentValue = dataset.data[tooltipItem.index];\n          var percentage = parseFloat(\n            ((currentValue / total) * 100).toFixed(1)\n          );\n          return currentValue + \" (\" + percentage + \"%)\";\n        },\n        title: function (tooltipItem, data) {\n          return data.labels[tooltipItem[0].index];\n        },\n      },\n    },\n    legend: {\n      display: true,\n      position: \"left\",\n      labels: {\n        boxWidth: 15,\n      },\n    },\n  };\n\n  const contentForInfo = (\n    <div style={{ textAlign: \"center\" }}>\n      <p>\n        The {heading === \"Issue Chart\" ? \"issues\" : \"pull requests\"} doughnut\n        chart is a representation of the current condition of the repository in\n        terms of '% of{\" \"}\n        {heading === \"Issue Chart\" ? \"issues closed\" : \"pull requests merged\"}.\n      </p>\n    </div>\n  );\n\n  return (\n    <div className=\"chart-pie\">\n      <Tooltip title={contentForInfo}>\n        <PieChartOutlined />\n      </Tooltip>\n      <h3>{heading}</h3>\n      <Doughnut data={dataToPlot} options={option} />\n    </div>\n  );\n};\n\nexport default DoughnutChart;\n","import { RadarChartOutlined } from \"@ant-design/icons\";\nimport { Select, Tooltip } from \"antd\";\nimport { HorizontalBar } from \"react-chartjs-2\";\nimport { useState } from \"react\";\n\nconst HorizontalBarGraph = ({ heading, communityContributionData }) => {\n  const [date, setDate] = useState(\"overall\");\n\n  let allIssues = communityContributionData.OVERALL_ALL_ISSUES.issueCount;\n  let nonCommunityIssues =\n    communityContributionData.OVERALL_NON_COMMUNITY_ISSUES.issueCount;\n  let allPRs = communityContributionData.OVERALL_ALL_PRS.issueCount;\n  let nonCommunityPRs =\n    communityContributionData.OVERALL_NON_COMMUNITY_PRS.issueCount;\n\n  switch (date) {\n    case \"overall\":\n      allIssues = communityContributionData.OVERALL_ALL_ISSUES.issueCount;\n      nonCommunityIssues =\n        communityContributionData.OVERALL_NON_COMMUNITY_ISSUES.issueCount;\n      allPRs = communityContributionData.OVERALL_ALL_PRS.issueCount;\n      nonCommunityPRs =\n        communityContributionData.OVERALL_NON_COMMUNITY_PRS.issueCount;\n      break;\n\n    case \"lastMonth\":\n      allIssues = communityContributionData.LAST_MONTH_ALL_ISSUES.issueCount;\n      nonCommunityIssues =\n        communityContributionData.LAST_MONTH_NON_COMMUNITY_ISSUES.issueCount;\n      allPRs = communityContributionData.LAST_MONTH_ALL_PRS.issueCount;\n      nonCommunityPRs =\n        communityContributionData.LAST_MONTH_NON_COMMUNITY_PRS.issueCount;\n      break;\n\n    case \"lastSixMonths\":\n      allIssues =\n        communityContributionData.LAST_SIX_MONTHS_ALL_ISSUES.issueCount;\n      nonCommunityIssues =\n        communityContributionData.LAST_SIX_MONTHS_NON_COMMUNITY_ISSUES\n          .issueCount;\n      allPRs = communityContributionData.LAST_SIX_MONTHS_ALL_PRS.issueCount;\n      nonCommunityPRs =\n        communityContributionData.LAST_SIX_MONTHS_NON_COMMUNITY_PRS.issueCount;\n      break;\n\n    case \"lastYear\":\n      allIssues = communityContributionData.LAST_YEAR_ALL_ISSUES.issueCount;\n      nonCommunityIssues =\n        communityContributionData.LAST_YEAR_NON_COMMUNITY_ISSUES.issueCount;\n      allPRs = communityContributionData.LAST_YEAR_ALL_PRS.issueCount;\n      nonCommunityPRs =\n        communityContributionData.LAST_YEAR_NON_COMMUNITY_PRS.issueCount;\n      break;\n\n    default:\n      break;\n  }\n\n  const dataToPlot = {\n    labels: [\"Issues\", \"PRs\"],\n    datasets: [\n      {\n        label: \"Community\",\n        backgroundColor: \"rgb(176,142,162,0.4)\",\n        borderColor: \"rgb(176,142,162,1)\",\n        borderWidth: 2,\n        data: [allIssues - nonCommunityIssues, allPRs - nonCommunityPRs],\n      },\n      {\n        label: \"Non Community\",\n        backgroundColor: \"rgb(255,166,48,0.4)\",\n        borderColor: \"rgb(255,166,48,1)\",\n        borderWidth: 2,\n        data: [nonCommunityIssues, nonCommunityPRs],\n      },\n    ],\n  };\n\n  const options = {\n    tooltips: {\n      callbacks: {\n        label: function (tooltipItem, data) {\n          var dataset = data.datasets[tooltipItem.datasetIndex];\n          var totalIssues = data.datasets[0].data[0] + data.datasets[1].data[0];\n          var totalPRs = data.datasets[0].data[1] + data.datasets[1].data[1];\n          var total = [totalIssues, totalPRs];\n          var currentValue = dataset.data[tooltipItem.index];\n          var percentage = parseFloat(\n            ((currentValue / total[tooltipItem.index]) * 100).toFixed(1)\n          );\n          return currentValue + \" (\" + percentage + \"%)\";\n        },\n        title: function (tooltipItem, data) {\n          return data.labels[tooltipItem[0].index];\n        },\n      },\n    },\n    scales: {\n      xAxes: [\n        {\n          ticks: {\n            beginAtZero: true,\n          },\n          scaleLabel: {\n            display: true,\n            labelString: \"No. of contributions\",\n          },\n        },\n      ],\n    },\n  };\n\n  const contentForInfo = (\n    <div style={{ textAlign: \"center\" }}>\n      <p>\n        The bar graph is the representation of the community and non-community\n        contributions in terms of issues and PRs.\n      </p>\n      <p>\n        1. <b>community contributions</b> &rarr; contributions by non-team\n        members\n      </p>\n      <p>\n        2. <b>non-community contributions</b> &rarr; contributions by the team\n        members\n      </p>\n    </div>\n  );\n\n  const { Option } = Select;\n\n  return (\n    <div className=\"chart-bar\">\n      <Tooltip title={contentForInfo}>\n        <RadarChartOutlined />\n      </Tooltip>\n      <h3>{heading}</h3>\n      <Select\n        style={{ width: 150 }}\n        size=\"small\"\n        defaultValue={\"overall\"}\n        onChange={(e) => {\n          // console.log(e);\n          setDate(e);\n        }}\n      >\n        <Option value=\"overall\">Overall</Option>\n        <Option value=\"lastMonth\">Last month</Option>\n        <Option value=\"lastSixMonths\">Last 6 months</Option>\n        <Option value=\"lastYear\">Last year</Option>\n      </Select>\n      <br />\n      <HorizontalBar data={dataToPlot} options={options} />\n    </div>\n  );\n};\n\nexport default HorizontalBarGraph;\n","import { Row, Col, Empty, Tooltip } from \"antd\";\nimport LineGraph from \"./LineGraph\";\nimport BarGraph from \"./BarGraph\";\nimport DoughnutChart from \"./DoughnutChart\";\nimport { IssuesCloseOutlined, PullRequestOutlined } from \"@ant-design/icons\";\nimport { Equation } from \"react-equation\";\nimport HorizontalBarGraph from \"./HorizontalBarGraph\";\nconst AnalyticGraphs = ({\n  totalOpenIssueCount,\n  totalCloseIssueCount,\n  totalOpenPRCount,\n  totalMergePRCount,\n  averageDaysIssueClosed,\n  averageDaysPRMerged,\n  issuesStatData,\n  prsStatData,\n  // nonCommunityIssues,\n  // allIssues,\n  // nonCommunityPRs,\n  // allPRs,\n  communityContributionData,\n}) => {\n  // console.log(\"FROMANALYTICS\", issuesStatData);\n  // console.log(\"FROMANALYTICS\", prsStatData);\n\n  // console.log(\"Non community Issues\", nonCommunityIssues);\n  // console.log(\"All Issues\", allIssues);\n  // console.log(\"Non community PRs\", nonCommunityPRs);\n  // console.log(\"All PRs\", allPRs);\n\n  const contentForPRInfo = (\n    <div style={{ textAlign: \"center\" }}>\n      <p>\n        The card tells how much time it takes for a decision to be made on a\n        submitted pull request. This performance indicator is calculated on the\n        basis of last 100 pull requests that were merged/closed, as follows:\n      </p>\n      <Equation\n        value={\"(sum(pr, 1, PRs, (closed date - opened date)) / PRs)\"}\n      />\n    </div>\n  );\n\n  const contentForIssueInfo = (\n    <div style={{ textAlign: \"center\" }}>\n      <p>\n        The card tells how much time it takes to resolve an issue that users'\n        open. This performance indicator is calculated on the basis of last 100\n        issues that were closed, as follows:\n      </p>\n      <Equation\n        value={\"(sum(issue, 1, Issues, (closed date - opened date)) / Issues)\"}\n      />\n    </div>\n  );\n\n  return (\n    <>\n      <div className=\"analytic-graphs\">\n        <Row>\n          {/* <Col span={12}>\n              // This space is reserved for a KPI (goes into the orientation with contribution kpi)\n            </h3>\n          </Col> */}\n          <Col span={12}>\n            {communityContributionData && (\n              <HorizontalBarGraph\n                heading={\"Community contributions\"}\n                communityContributionData={communityContributionData}\n              />\n            )}\n          </Col>\n        </Row>\n        <Row>\n          <Col span={12}>\n            {issuesStatData && (\n              <LineGraph\n                dataGroupedByMonth={issuesStatData}\n                label=\"Issues closed %\"\n                heading=\"Issues Trend\"\n              />\n            )}\n          </Col>\n          <Col span={12}>\n            <Row>\n              <Col span={12}>\n                {totalOpenIssueCount || totalCloseIssueCount ? (\n                  <DoughnutChart\n                    heading=\"Issue Chart\"\n                    label1=\"Open Issues\"\n                    data1={totalOpenIssueCount}\n                    label2=\"Close Issues\"\n                    data2={totalCloseIssueCount}\n                  />\n                ) : (\n                  <Empty\n                    image={Empty.PRESENTED_IMAGE_SIMPLE}\n                    description={'No \"Issue chart\" data available'}\n                  />\n                )}\n              </Col>\n              <Col span={12}>\n                {totalOpenPRCount || totalMergePRCount ? (\n                  <DoughnutChart\n                    heading=\"Pull Request Chart\"\n                    label1=\"Open PRs\"\n                    data1={totalOpenPRCount}\n                    label2=\"Merge PRs\"\n                    data2={totalMergePRCount}\n                  />\n                ) : (\n                  <Empty\n                    image={Empty.PRESENTED_IMAGE_SIMPLE}\n                    description={'No \"Pull request chart\" data available'}\n                  />\n                )}\n              </Col>\n            </Row>\n            <Row>\n              <Col span={12}>\n                {averageDaysIssueClosed ? (\n                  <div className=\"issue-close-average\">\n                    <Tooltip title={contentForIssueInfo}>\n                      <IssuesCloseOutlined />\n                    </Tooltip>\n                    <h4>Avg. days to close an issue</h4>\n                    <h2>{averageDaysIssueClosed}</h2>\n                  </div>\n                ) : (\n                  <Empty\n                    image={Empty.PRESENTED_IMAGE_SIMPLE}\n                    description={\n                      'No \"avg. days to close an issue\" data available'\n                    }\n                  />\n                )}\n              </Col>\n              <Col span={12}>\n                {averageDaysPRMerged ? (\n                  <div className=\"pr-merge-average\">\n                    <Tooltip title={contentForPRInfo}>\n                      <PullRequestOutlined />\n                    </Tooltip>\n                    <h4>Avg. days to merge a PR</h4>\n                    <h2>{averageDaysPRMerged}</h2>\n                  </div>\n                ) : (\n                  <Empty\n                    image={Empty.PRESENTED_IMAGE_SIMPLE}\n                    description={'No \"avg. days to merge a PR\" data available'}\n                  />\n                )}\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n        <Row>\n          <Col span={12}>\n            {issuesStatData && (\n              <BarGraph\n                dataGroupedByMonth={issuesStatData}\n                label1=\"Open Issue\"\n                label2=\"Closed Issue\"\n                heading=\"Issue Categories\"\n              />\n            )}\n          </Col>\n          <Col span={12}>\n            {prsStatData && (\n              <BarGraph\n                dataGroupedByMonth={prsStatData}\n                label1=\"Open PR\"\n                label2=\"Merged PR\"\n                heading=\"Pull Request Categories\"\n              />\n            )}\n          </Col>\n        </Row>\n      </div>\n\n      <div className=\"analytic-graphs-mobile\">\n        <Row>\n          <Col span={24}>\n            {communityContributionData && (\n              <HorizontalBarGraph\n                heading={\"Community contributions\"}\n                communityContributionData={communityContributionData}\n              />\n            )}\n          </Col>\n        </Row>\n        <Row>\n          <Col span={24}>\n            {issuesStatData && (\n              <LineGraph\n                dataGroupedByMonth={issuesStatData}\n                label=\"Issues closed %\"\n                heading=\"Issues Trend\"\n              />\n            )}\n          </Col>\n        </Row>\n        <Row>\n          <Col span={24}>\n            <Row>\n              <Col span={12}>\n                {totalOpenIssueCount || totalCloseIssueCount ? (\n                  <DoughnutChart\n                    heading=\"Issue Chart\"\n                    label1=\"Open Issues\"\n                    data1={totalOpenIssueCount}\n                    label2=\"Close Issues\"\n                    data2={totalCloseIssueCount}\n                  />\n                ) : (\n                  <Empty\n                    image={Empty.PRESENTED_IMAGE_SIMPLE}\n                    description={'No \"Issue chart\" data available'}\n                  />\n                )}\n              </Col>\n              <Col span={12}>\n                {totalOpenPRCount || totalMergePRCount ? (\n                  <DoughnutChart\n                    heading=\"Pull Request Chart\"\n                    label1=\"Open PRs\"\n                    data1={totalOpenPRCount}\n                    label2=\"Merge PRs\"\n                    data2={totalMergePRCount}\n                  />\n                ) : (\n                  <Empty\n                    image={Empty.PRESENTED_IMAGE_SIMPLE}\n                    description={'No \"Pull request chart\" data available'}\n                  />\n                )}\n              </Col>\n            </Row>\n            <Row>\n              <Col span={12}>\n                {averageDaysIssueClosed ? (\n                  <div className=\"issue-close-average\">\n                    <Tooltip title={contentForIssueInfo}>\n                      <IssuesCloseOutlined />\n                    </Tooltip>\n                    <h4>Avg. days to close an issue</h4>\n                    <h2>{averageDaysIssueClosed}</h2>\n                  </div>\n                ) : (\n                  <Empty\n                    image={Empty.PRESENTED_IMAGE_SIMPLE}\n                    description={\n                      'No \"avg. days to close an issue\" data available'\n                    }\n                  />\n                )}\n              </Col>\n              <Col span={12}>\n                {averageDaysPRMerged ? (\n                  <div className=\"pr-merge-average\">\n                    <Tooltip title={contentForPRInfo}>\n                      <PullRequestOutlined />\n                    </Tooltip>\n                    <h4>Avg. days to merge a PR</h4>\n                    <h2>{averageDaysPRMerged}</h2>\n                  </div>\n                ) : (\n                  <Empty\n                    image={Empty.PRESENTED_IMAGE_SIMPLE}\n                    description={'No \"avg. days to merge a PR\" data available'}\n                  />\n                )}\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n        <Row>\n          <Col span={24}>\n            {issuesStatData && (\n              <BarGraph\n                dataGroupedByMonth={issuesStatData}\n                label1=\"Open Issue\"\n                label2=\"Closed Issue\"\n                heading=\"Issue Categories\"\n              />\n            )}\n          </Col>\n        </Row>\n        <Row>\n          <Col span={24}>\n            {prsStatData && (\n              <BarGraph\n                dataGroupedByMonth={prsStatData}\n                label1=\"Open PR\"\n                label2=\"Merged PR\"\n                heading=\"Pull Request Categories\"\n              />\n            )}\n          </Col>\n        </Row>\n      </div>\n    </>\n  );\n};\n\nexport default AnalyticGraphs;\n","import { gql } from \"@apollo/client\";\nimport moment from \"moment\";\n\n/*\nQuery structure that is built dynamically:\n\nquery {\n    MONTH_YEAR_OPEN_ISSUE: search(type: ISSUE, query: \"repo:{__org__/__repo__}  type:issue is:open\", last: 100) {\n      issueCount\n    }\n    MONTH_YEAR_CLOSED_ISSUE: search(type: ISSUE, query: \"repo:{__org__/__repo__}  type:issue is:closed\", last: 100) {\n      issueCount\n    }\n    MONTH_YEAR_OPEN_PR: search(type: ISSUE, query: \"repo:{__org__/__repo__}  type:pr is:open\", last: 100) {\n      issueCount\n    }\n    MONTH_YEAR_CLOSED_PR: search(type: ISSUE, query: \"repo:{__org__/__repo__}  type:pr is:merged\", last: 100) {\n      issueCount\n    }\n}\n*/\n\nconst open_pr_qs = (selectedRepository, dateString) =>\n  `\"repo:${selectedRepository} type:pr is:open created:${dateString}\"`;\n\nconst merged_pr_qs = (selectedRepository, dateString) =>\n  `\"repo:${selectedRepository} type:pr is:merged merged:${dateString}\"`;\n\nconst open_issue_qs = (selectedRepository, dateString) =>\n  `\"repo:${selectedRepository} type:issue is:open created:${dateString}\"`;\n\nconst closed_issue_qs = (selectedRepository, dateString) =>\n  `\"repo:${selectedRepository} type:issue is:closed closed:${dateString}\"`;\n\nconst MONTHS = () => {\n  const noOfYears = 1.25;\n  const noOfMonths = noOfYears * 12;\n\n  const monthRanges = [];\n\n  for (let month = noOfMonths - 1; month >= 0; month--) {\n    let monthStart = moment()\n      .subtract(month, \"months\")\n      .startOf(\"month\")\n      .format(\"YYYY-MM-DD\")\n      .toString();\n\n    let monthEnd = moment()\n      .subtract(month, \"months\")\n      .endOf(\"month\")\n      .format(\"YYYY-MM-DD\")\n      .toString();\n\n    let dateString = `${monthStart}..${monthEnd}`;\n\n    monthRanges.push(dateString);\n  }\n\n  return monthRanges;\n};\n\nconst queryGenerator = (selectedRepository) => {\n  let finalQuery = \"\";\n\n  let months = MONTHS();\n\n  for (let i = 0; i < months.length; i++) {\n    finalQuery += `\n    \n    ${moment(months[i].substring(0, 10), \"YYYY-MM-DD\").format(\n      \"MMM_YYYY\"\n    )}_OPEN_ISSUES: search(query: ${open_issue_qs(\n      selectedRepository,\n      months[i]\n    )}, type: ISSUE, last: 100) {\n        issueCount\n    }`;\n\n    finalQuery += `\n    \n    ${moment(months[i], \"YYYY-MM-DD\").format(\n      \"MMM_YYYY\"\n    )}_CLOSED_ISSUES: search(query: ${closed_issue_qs(\n      selectedRepository,\n      months[i]\n    )}, type: ISSUE, last: 100) {\n        issueCount\n    }`;\n\n    finalQuery += `\n    \n    ${moment(months[i], \"YYYY-MM-DD\").format(\n      \"MMM_YYYY\"\n    )}_OPEN_PRS: search(query: ${open_pr_qs(\n      selectedRepository,\n      months[i]\n    )}, type: ISSUE, last: 100) {\n        issueCount\n    }`;\n\n    finalQuery += `\n    \n    ${moment(months[i], \"YYYY-MM-DD\").format(\n      \"MMM_YYYY\"\n    )}_MERGED_PRS: search(query: ${merged_pr_qs(\n      selectedRepository,\n      months[i]\n    )}, type: ISSUE, last: 100) {\n        issueCount\n    }`;\n  }\n\n  return finalQuery;\n};\n\nconst ISSUES_AND_PRS_MONTHLY = (selectedRepository) => {\n  let query = `\n          query {\n              ${queryGenerator(selectedRepository)}\n          }\n  \n      `;\n\n  //   console.log(\"Query String\", queryGenerator(selectedRepository));\n\n  return gql`\n    ${query}\n  `;\n};\n\nexport { ISSUES_AND_PRS_MONTHLY };\n","import { gql } from \"@apollo/client\";\nimport { USERS } from \"../data/users\";\nimport moment from \"moment\";\n\n/*\nQuery structure that is built dynamically:\n\nquery {\n    OVERALL_COMMUNITY_PRS: search(query: \"repo:{__org__/__repo__} author:{__author-list__} created:{__date-range__})\", type: ISSUE) {\n      issueCount\n    }\n\n    OVERALL_NON_COMMUNITY_PRS: search(query: \"repo:{__org__/__repo__} created:{__date-range__})\", type: ISSUE) {\n      issueCount\n    }\n\n    OVERALL_COMMUNITY_ISSUES: search(query: \"repo:{__org__/__repo__} author:{__author-list__} created:{__date-range__})\", type: ISSUE) {\n      issueCount\n    }\n\n    OVERALL_NON_COMMUNITY_ISSUES: search(query: \"repo:{__org__/__repo__} created:{__date-range__})\", type: ISSUE) {\n      issueCount\n    }\n\n\n    LAST_MONTH_COMMUNITY_PRS: search(query: \"repo:{__org__/__repo__} author:{__author-list__} created:{__date-range__})\", type: ISSUE) {\n      issueCount\n    }\n\n    LAST_MONTH_NON_COMMUNITY_PRS: search(query: \"repo:{__org__/__repo__} created:{__date-range__})\", type: ISSUE) {\n      issueCount\n    }\n\n    LAST_MONTH_COMMUNITY_ISSUES: search(query: \"repo:{__org__/__repo__} author:{__author-list__} created:{__date-range__})\", type: ISSUE) {\n      issueCount\n    }\n\n    LAST_MONTH_NON_COMMUNITY_ISSUES: search(query: \"repo:{__org__/__repo__} created:{__date-range__})\", type: ISSUE) {\n      issueCount\n    }\n\n\n    LAST_SIX_MONTHS_COMMUNITY_PRS: search(query: \"repo:{__org__/__repo__} author:{__author-list__} created:{__date-range__})\", type: ISSUE) {\n      issueCount\n    }\n\n    LAST_SIX_MONTHS_NON_COMMUNITY_PRS: search(query: \"repo:{__org__/__repo__} created:{__date-range__})\", type: ISSUE) {\n      issueCount\n    }\n\n    LAST_SIX_MONTHS_COMMUNITY_ISSUES: search(query: \"repo:{__org__/__repo__} author:{__author-list__} created:{__date-range__})\", type: ISSUE) {\n      issueCount\n    }\n\n    LAST_SIX_MONTHS_NON_COMMUNITY_ISSUES: search(query: \"repo:{__org__/__repo__} created:{__date-range__})\", type: ISSUE) {\n      issueCount\n    }\n\n\n    LAST_YEAR_COMMUNITY_PRS: search(query: \"repo:{__org__/__repo__} author:{__author-list__} created:{__date-range__})\", type: ISSUE) {\n      issueCount\n    }\n\n    LAST_YEAR_NON_COMMUNITY_PRS: search(query: \"repo:{__org__/__repo__} created:{__date-range__})\", type: ISSUE) {\n      issueCount\n    }\n\n    LAST_YEAR_COMMUNITY_ISSUES: search(query: \"repo:{__org__/__repo__} author:{__author-list__} created:{__date-range__})\", type: ISSUE) {\n      issueCount\n    }\n\n    LAST_YEAR_NON_COMMUNITY_ISSUES: search(query: \"repo:{__org__/__repo__} created:{__date-range__})\", type: ISSUE) {\n      issueCount\n    }\n}\n*/\n\nconst pr_non_community = (\n  selectedRepository,\n  authorString,\n  dateString = `<=${moment().format(\"YYYY-MM-DD\")}`\n) =>\n  `\"repo:${selectedRepository} ${authorString} type:pr created:${dateString}\"`;\n\nconst pr_all = (\n  selectedRepository,\n  dateString = `<=${moment().format(\"YYYY-MM-DD\")}`\n) => `\"repo:${selectedRepository} type:pr created:${dateString}\"`;\n\nconst issue_non_community = (\n  selectedRepository,\n  authorString,\n  dateString = `<=${moment().format(\"YYYY-MM-DD\")}`\n) =>\n  `\"repo:${selectedRepository} ${authorString} type:issue created:${dateString}\"`;\n\nconst issue_all = (\n  selectedRepository,\n  dateString = `<=${moment().format(\"YYYY-MM-DD\")}`\n) => `\"repo:${selectedRepository} type:issue created:${dateString}\"`;\n\nconst MEMBERS = () => {\n  let authors = \"\";\n  USERS.forEach((user) => {\n    authors += `author:${user} `;\n  });\n\n  return authors.trim();\n};\n\nconst DATE_RANGE = (month) => {\n  let today = moment().format(\"YYYY-MM-DD\");\n  let fromDate = moment().subtract(month, \"months\").format(\"YYYY-MM-DD\");\n\n  return `${fromDate}..${today}`;\n};\n\nconst queryGenerator = (selectedRepository) => {\n  let finalQuery = `\n          OVERALL_NON_COMMUNITY_PRS: search(query: ${pr_non_community(\n            selectedRepository,\n            MEMBERS()\n          )},\n          type: ISSUE) {\n            issueCount\n          }\n\n          OVERALL_ALL_PRS: search(query: ${pr_all(selectedRepository)},\n          type: ISSUE) {\n            issueCount\n          }\n\n          OVERALL_NON_COMMUNITY_ISSUES: search(query: ${issue_non_community(\n            selectedRepository,\n            MEMBERS()\n          )},\n          type: ISSUE) {\n            issueCount\n          }\n\n          OVERALL_ALL_ISSUES: search(query: ${issue_all(selectedRepository)},\n          type: ISSUE) {\n            issueCount\n          }\n\n\n        LAST_MONTH_NON_COMMUNITY_PRS: search(query: ${pr_non_community(\n          selectedRepository,\n          MEMBERS(),\n          DATE_RANGE(1)\n        )},\n        type: ISSUE) {\n          issueCount\n        }\n\n        LAST_MONTH_ALL_PRS: search(query: ${pr_all(\n          selectedRepository,\n          DATE_RANGE(1)\n        )},\n        type: ISSUE) {\n          issueCount\n        }\n\n        LAST_MONTH_NON_COMMUNITY_ISSUES: search(query: ${issue_non_community(\n          selectedRepository,\n          MEMBERS(),\n          DATE_RANGE(1)\n        )},\n        type: ISSUE) {\n          issueCount\n        }\n\n        LAST_MONTH_ALL_ISSUES: search(query: ${issue_all(\n          selectedRepository,\n          DATE_RANGE(1)\n        )},\n        type: ISSUE) {\n          issueCount\n        }\n\n\n        LAST_SIX_MONTHS_NON_COMMUNITY_PRS: search(query: ${pr_non_community(\n          selectedRepository,\n          MEMBERS(),\n          DATE_RANGE(6)\n        )},\n        type: ISSUE) {\n          issueCount\n        }\n\n        LAST_SIX_MONTHS_ALL_PRS: search(query: ${pr_all(\n          selectedRepository,\n          DATE_RANGE(6)\n        )},\n        type: ISSUE) {\n          issueCount\n        }\n\n        LAST_SIX_MONTHS_NON_COMMUNITY_ISSUES: search(query: ${issue_non_community(\n          selectedRepository,\n          MEMBERS(),\n          DATE_RANGE(6)\n        )},\n        type: ISSUE) {\n          issueCount\n        }\n\n        LAST_SIX_MONTHS_ALL_ISSUES: search(query: ${issue_all(\n          selectedRepository,\n          DATE_RANGE(6)\n        )},\n        type: ISSUE) {\n          issueCount\n        }\n\n\n        LAST_YEAR_NON_COMMUNITY_PRS: search(query: ${pr_non_community(\n          selectedRepository,\n          MEMBERS(),\n          DATE_RANGE(12)\n        )},\n        type: ISSUE) {\n          issueCount\n        }\n\n        LAST_YEAR_ALL_PRS: search(query: ${pr_all(\n          selectedRepository,\n          DATE_RANGE(12)\n        )},\n        type: ISSUE) {\n          issueCount\n        }\n\n        LAST_YEAR_NON_COMMUNITY_ISSUES: search(query: ${issue_non_community(\n          selectedRepository,\n          MEMBERS(),\n          DATE_RANGE(12)\n        )},\n        type: ISSUE) {\n          issueCount\n        }\n\n        LAST_YEAR_ALL_ISSUES: search(query: ${issue_all(\n          selectedRepository,\n          DATE_RANGE(12)\n        )},\n        type: ISSUE) {\n          issueCount\n        }\n    `;\n\n  return finalQuery;\n};\n\nconst COMMUNITY_CONTRIBUTIONS = (selectedRepository) => {\n  let query = `\n            query {\n                ${queryGenerator(selectedRepository)}\n            }\n    \n        `;\n\n  // console.log(\"Query String\", queryGenerator(selectedRepository));\n\n  return gql`\n    ${query}\n  `;\n};\n\nexport { COMMUNITY_CONTRIBUTIONS };\n","import { useQuery } from \"@apollo/client\";\nimport {\n  ISSUES_AND_PR_AVERAGE,\n  ISSUES_AND_PR_TOTAL_COUNT,\n} from \"../../queries/analytics_queries\";\nimport { calculateAverageDays } from \"../../utils/calculateAverageDays\";\nimport { PageHeader, Skeleton } from \"antd\";\nimport AnalyticGraphs from \"./AnalyticGraphs\";\nimport { ISSUES_AND_PRS_MONTHLY } from \"../../queries/analytics_monthwise_stats\";\nimport { separateAndSplitData } from \"../../utils/separateAndSplitData\";\nimport { COMMUNITY_CONTRIBUTIONS } from \"../../queries/analytics_community_contribution_stats\";\n\nconst RepositoryAnalytics = ({ owner, repository }) => {\n  // ************************\n  // ************************\n\n  const {\n    loading: totalCountDataLoading,\n    // eslint-disable-next-line\n    error: totalCountDataError,\n    data: totalCountDataData,\n  } = useQuery(ISSUES_AND_PR_TOTAL_COUNT, {\n    variables: { repositoryName: repository, ownerName: owner },\n  });\n\n  if (totalCountDataData && !totalCountDataLoading) {\n    var totalOpenIssueCount = totalCountDataData.OPEN_ISSUES.issues.totalCount;\n    var totalCloseIssueCount =\n      totalCountDataData.CLOSED_ISSUES.issues.totalCount;\n    var totalOpenPRCount = totalCountDataData.OPEN_PR.pullRequests.totalCount;\n    var totalMergePRCount =\n      totalCountDataData.MERGED_PR.pullRequests.totalCount;\n  }\n\n  // ************************\n  // ************************\n\n  const {\n    loading: averageDataLoading,\n    // eslint-disable-next-line\n    error: averageDataError,\n    data: averageDataData,\n  } = useQuery(ISSUES_AND_PR_AVERAGE, {\n    variables: { repositoryName: repository, ownerName: owner },\n  });\n\n  if (averageDataData && !averageDataLoading) {\n    var averageIssueCloseDate = calculateAverageDays(\n      averageDataData.ISSUE_AVG.issues.nodes\n    );\n    var averagePRMergeDate = calculateAverageDays(\n      averageDataData.PR_AVG.pullRequests.nodes\n    );\n    var averageDaysIssueClosed = averageIssueCloseDate;\n    var averageDaysPRMerged = averagePRMergeDate;\n  }\n\n  // ************************\n  // ************************\n\n  const {\n    loading: monthlyStatLoading,\n    // eslint-disable-next-line\n    error: monthlyStatError,\n    data: monthlyStatData,\n  } = useQuery(ISSUES_AND_PRS_MONTHLY(`${owner}/${repository}`));\n\n  if (monthlyStatData && !monthlyStatLoading) {\n    var statData = separateAndSplitData(monthlyStatData);\n  }\n\n  // ************************\n  // ************************\n\n  // Query for community contribution KPI\n\n  const {\n    loading: communityContributionLoading,\n    // eslint-disable-next-line\n    error: communityContributionError,\n    data: communityContributionData,\n  } = useQuery(COMMUNITY_CONTRIBUTIONS(`${owner}/${repository}`));\n\n  return (\n    <div className=\"repository-analytics\">\n      <PageHeader\n        className=\"page-header\"\n        title=\"Analytics\"\n        subTitle={repository}\n      />\n\n      {(!totalCountDataData || !averageDataData || !monthlyStatData) && (\n        <Skeleton />\n      )}\n\n      {totalCountDataData &&\n        !totalCountDataLoading &&\n        averageDataData &&\n        !averageDataLoading &&\n        monthlyStatData &&\n        !monthlyStatLoading &&\n        communityContributionData &&\n        !communityContributionLoading && (\n          <AnalyticGraphs\n            totalOpenIssueCount={totalOpenIssueCount}\n            totalCloseIssueCount={totalCloseIssueCount}\n            totalOpenPRCount={totalOpenPRCount}\n            totalMergePRCount={totalMergePRCount}\n            averageDaysIssueClosed={averageDaysIssueClosed}\n            averageDaysPRMerged={averageDaysPRMerged}\n            issuesStatData={statData.issuesStatSplit}\n            prsStatData={statData.prsStatSplit}\n            communityContributionData={communityContributionData}\n          />\n        )}\n    </div>\n  );\n};\n\nexport default RepositoryAnalytics;\n","import _ from \"lodash\";\n\nexport const separateAndSplitData = (data) => {\n  // console.log(\"DATA FROM FUNCTION\", data);\n\n  const keys = Object.keys(data);\n\n  const issues = _.groupBy(keys, (key) => key.includes(\"ISSUES\"));\n\n  const issuesByMonth = _.groupBy(issues.true, (key) => {\n    const x = key.split(\"_\");\n    const y = `${x[0]} ${x[1]}`;\n\n    return y;\n  });\n\n  const prsByMonth = _.groupBy(issues.false, (key) => {\n    const x = key.split(\"_\");\n    const y = `${x[0]} ${x[1]}`;\n\n    return y;\n  });\n\n  // console.log(\"ISSUES\", issuesByMonth);\n  // console.log(\"PRS\", prsByMonth);\n\n  const issuesStatSplit = Object.keys(issuesByMonth).map((issue) => {\n    const a = issuesByMonth[issue];\n\n    const x = a[0];\n    const y = a[1];\n\n    return {\n      Month: issue,\n      open: data[x].issueCount,\n      closed: data[y].issueCount,\n    };\n  });\n\n  const prsStatSplit = Object.keys(prsByMonth).map((pr) => {\n    const a = prsByMonth[pr];\n\n    const x = a[0];\n    const y = a[1];\n\n    return {\n      Month: pr,\n      open: data[x].issueCount,\n      merged: data[y].issueCount,\n    };\n  });\n\n  // console.log(\"PRS\", prsStatSplit);\n  // console.log(\"ISSUES\", issuesStatSplit);\n\n  return { issuesStatSplit, prsStatSplit };\n};\n","import { useState } from \"react\";\nimport RepositoryList from \"./RepositoryList\";\nimport RepositoryAnalytics from \"./RepositoryAnalytics\";\nimport { Button, Card, Drawer } from \"antd\";\nimport { REPOSITORIES } from \"../../data/repositories\";\nimport { UnorderedListOutlined } from \"@ant-design/icons\";\n\nconst Analytics = () => {\n  // Default repository is the first repository object in the REPOSITORIES list\n  const [selectedRepository, setSelectedRepository] = useState(\n    JSON.parse(localStorage.getItem(\"analyticsRepository\")) || REPOSITORIES[0]\n  );\n  const repositoryCallback = (selectedRepository) => {\n    setSelectedRepository(selectedRepository);\n  };\n  // console.log(\"SELECTED REPOSITORY:\", selectedRepository);\n\n  localStorage.setItem(\n    \"analyticsRepository\",\n    JSON.stringify(selectedRepository)\n  );\n\n  const [visible, setVisible] = useState(false);\n\n  const showDrawer = () => {\n    setVisible(true);\n  };\n\n  const onClose = () => {\n    setVisible(false);\n  };\n\n  return (\n    <div className=\"analytics\">\n      <Card className=\"repo-list\">\n        <RepositoryList repositoryCallback={repositoryCallback} />\n      </Card>\n      <div className=\"mobile-visible\">\n        <Button\n          icon={<UnorderedListOutlined />}\n          size=\"small\"\n          onClick={showDrawer}\n        ></Button>\n        <Drawer\n          placement=\"left\"\n          closable={false}\n          onClose={onClose}\n          visible={visible}\n          getContainer={false}\n          drawerStyle={{ backgroundColor: \"#3d5861\" }}\n        >\n          <div className=\"repo-list-mobile\">\n            <RepositoryList\n              repositoryCallback={repositoryCallback}\n              drawerClose={onClose}\n            />\n          </div>\n        </Drawer>\n      </div>\n      <div className=\"repo-analytics\">\n        <RepositoryAnalytics\n          owner={selectedRepository.owner}\n          repository={selectedRepository.repo}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Analytics;\n","import { Button, Result } from \"antd\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Error404 = () => {\n  const history = useHistory();\n\n  return (\n    <Result\n      status=\"404\"\n      title=\"404\"\n      subTitle=\"Sorry, the page you visited does not exist.\"\n      extra={\n        <Button type=\"primary\" onClick={() => history.push(\"/\")}>\n          Back Home\n        </Button>\n      }\n    />\n  );\n};\n\nexport default Error404;\n","import React from \"react\";\nimport {\n  HashRouter as Router,\n  Redirect,\n  Route,\n  Switch,\n} from \"react-router-dom\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport PageFooter from \"./components/Navbar/PageFooter\";\nimport Collections from \"./components/Collections/Collections\";\nimport Developers from \"./components/Developers/Developers\";\nimport Analytics from \"./components/Analytics/Analytics\";\nimport Error404 from \"./components/ErrorPage/Error404\";\n\nimport { Layout } from \"antd\";\n\nconst { Header, Content, Footer } = Layout;\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Layout className=\"main-layout\">\n        <Header>\n          <Navbar />\n        </Header>\n        <Content>\n          <Switch>\n            <Redirect exact from=\"/\" to=\"/collections\" />\n            <Route exact path={[\"/\", \"/collections\"]}>\n              <Collections />\n            </Route>\n            <Route exact path=\"/developers\">\n              <Developers />\n            </Route>\n            <Route exact path=\"/analytics\">\n              <Analytics />\n            </Route>\n            <Route path=\"*\">\n              <Error404 />\n            </Route>\n          </Switch>\n        </Content>\n        <Footer>\n          <PageFooter />\n        </Footer>\n      </Layout>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\nimport { message } from \"antd\";\nimport App from \"./App\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  HttpLink,\n} from \"@apollo/client\";\nimport { onError } from \"@apollo/client/link/error\";\n\nconst httpLink = new HttpLink({\n  // uri: `\"${process.env.REACT_APP_GITHUB_URL}\"`,\n  uri: `${process.env.REACT_APP_GITHUB_API_URL}`,\n  headers: {\n    Authorization: `bearer ${process.env.REACT_APP_GITHUB_TOKEN}`,\n  },\n});\n\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors)\n    graphQLErrors.forEach(({ message, locations, path }) =>\n      console.log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n      )\n    );\n\n  if (networkError) {\n    console.log(`[Network error]: ${networkError}`);\n  }\n\n  message.error(\"Something went wrong\");\n});\n\nconst client = new ApolloClient({\n  link: errorLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}